<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java8常用API.md</title>
      <link href="/2021/06/18/Java8%E5%B8%B8%E7%94%A8API/"/>
      <url>/2021/06/18/Java8%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h1 id="📘-Lambda表达式"><a href="#📘-Lambda表达式" class="headerlink" title="📘 Lambda表达式"></a>📘 Lambda表达式</h1><h2 id="1-Lambda-表达式演示"><a href="#1-Lambda-表达式演示" class="headerlink" title="1. Lambda 表达式演示"></a>1. Lambda 表达式演示</h2><h6 id="一般的匿名类"><a href="#一般的匿名类" class="headerlink" title="一般的匿名类:"></a><em>一般的匿名类:</em></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Runnable匿名内部类</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bbb&quot;</span>);    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(runnable).start();</span><br></pre></td></tr></table></figure><p><em>lambda表达式：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *第一种：声明一个父类接口，初始化该接口的匿名实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Runnable r1=()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//线程任务对象包装成线程对象。</span></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(r1);</span><br><span class="line"><span class="comment">//启动线程。</span></span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *第二种：无需声明，直接使用匿名内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//线程任务对象包装成线程对象。</span></span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//启动线程。</span></span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *两种方式的区别在于你是否需要重复使用该接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="2-理解Lambda步骤："><a href="#2-理解Lambda步骤：" class="headerlink" title="2. 理解Lambda步骤："></a>2. 理解Lambda步骤：</h2><h3 id="2-1：函数式接口"><a href="#2-1：函数式接口" class="headerlink" title="2.1：函数式接口"></a>2.1：<strong>函数式接口</strong></h3><p><strong>lambda的前置条件：</strong>必须是函数式接口，才可以用lamnda表达式。</p><h3 id="2-2：语法格式"><a href="#2-2：语法格式" class="headerlink" title="2.2：语法格式"></a>2.2：<strong>语法格式</strong></h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(参数列表) -&gt; &#123;</span><br><span class="line">    Lambda体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“参数列表”详细语法"><a href="#“参数列表”详细语法" class="headerlink" title="“参数列表”详细语法"></a>“参数列表”详细语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *无参，小括号()必写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *有一个参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Consumer&lt;String&gt; con = (x) -&gt; &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一个参数时，参数列表的括号“()”可以省略不写，直接写参数列表</span></span><br><span class="line">Consumer&lt;String&gt; con = x -&gt; &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *有多个参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="“Lambda体”详细语法"><a href="#“Lambda体”详细语法" class="headerlink" title="“Lambda体”详细语法"></a>“Lambda体”详细语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体只有一行，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Lambda体只有一行时，也可以省略“&#123;&#125;”符号</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体有多行，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体只有一行，而且有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//这种情况下，可以同时省略“return”关键字 和 “&#123;&#125;”符号</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  Integer.compare(x, y));</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体有多行，而且有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-拓展：Lambda表达式中的类型推断"><a href="#3-拓展：Lambda表达式中的类型推断" class="headerlink" title="3. 拓展：Lambda表达式中的类型推断"></a>3. 拓展：Lambda表达式中的类型推断</h2><p>Lambda 表达式的参数列表实质上是带有参数类型的，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((Integer x,Integer y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下"><a href="#但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下" class="headerlink" title="但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下"></a>但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-Lambda表达式特征总结"><a href="#4-Lambda表达式特征总结" class="headerlink" title="4. Lambda表达式特征总结"></a>4. Lambda表达式特征总结</h2><ol><li>不用声明参数类型，编译器可统一识别参数值。</li><li>一个参数不用定义圆括号, 多个参数则需要圆括号。</li><li>方法体里只包含一个语句，不需要使用大括号。</li><li>如果方法体只有一个表达式返回值则编译器会自动返回值，而大括号需指定表达式返回了一个数值。</li></ol><h1 id="📘-函数式接口"><a href="#📘-函数式接口" class="headerlink" title="📘 函数式接口"></a>📘 函数式接口</h1><h2 id="一、函数式接口特征："><a href="#一、函数式接口特征：" class="headerlink" title="一、函数式接口特征："></a><strong>一、函数式接口特征：</strong></h2><p>接口中有且仅有一个抽象方法。（但是可以有多个非抽象方法，如静态方法和默认方法）</p><h2 id="二、-四大内置核心函数式接口"><a href="#二、-四大内置核心函数式接口" class="headerlink" title="二、 四大内置核心函数式接口"></a>二、 四大内置核心函数式接口</h2><table><thead><tr><th></th><th>接口</th><th>抽象方法</th></tr></thead><tbody><tr><td>消费型接口（有一个参数且无返回值）</td><td>Consumer<T></td><td>void accept(T t)</td></tr><tr><td>供给型接口（无参且有返回值）</td><td>Supplier<T></td><td>T get( )</td></tr><tr><td>函数型接口（有一个参数且有返回值）</td><td>Function&lt;T,R&gt;</td><td>R apply(T t)</td></tr><tr><td>断言型接口（有参且返回布尔值）</td><td>Predicate<T></td><td>boolean test(T t)</td></tr></tbody></table><p><em>注：这四个函数式接口基本囊括了业务中90%的技术需求。但如果遇到这四个接口无法解决的技术需求，实际上在 java.lang.funtion 包中还有非常多的函数式接口供使用。这些接口大部分继承了四大核心函数式接口或继承了四大核心函数式接口的思想。以下举了一些例子，更多可以自己了解：</em></p><table><thead><tr><th></th><th>接口</th><th>抽象方法</th></tr></thead><tbody><tr><td>与消费型接口Consumer类似（有两个参数且无返回值）</td><td>BiConsumer&lt;T,U&gt;</td><td>void accept(T t, U u)</td></tr><tr><td>与函数型接口Function类似（有两个参数且有返回值）</td><td>BiFunction&lt;T,U,R&gt;</td><td>R apply(T t, U u)</td></tr><tr><td>与断言型接口Predicate类似（有两个参数且返回布尔值）</td><td>BiPredicate&lt;T, U&gt;</td><td>boolean test(T t, U u)</td></tr></tbody></table><h2 id="拓展、-FunctionalInterface注解"><a href="#拓展、-FunctionalInterface注解" class="headerlink" title="拓展、@FunctionalInterface注解"></a>拓展、@<strong>FunctionalInterface注解</strong></h2><h6 id="FunctionalInterface-注解用于表示一个接口为函数式接口。"><a href="#FunctionalInterface-注解用于表示一个接口为函数式接口。" class="headerlink" title="@FunctionalInterface 注解用于表示一个接口为函数式接口。"></a>@FunctionalInterface 注解用于表示一个接口为函数式接口。</h6><p>同时，我们也可以使用@FunctionalInterface注解来检查某个接口是否为函数式接口：如果使用了@FunctionalInterface注解，接口中的抽象方法只允许有一个。</p><h1 id="📘-Stream-API"><a href="#📘-Stream-API" class="headerlink" title="📘 Stream API"></a>📘 Stream API</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>​    Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，<strong>就类似于使用 SQL 执行的数据库查询</strong>。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><h2 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h2><p>定义一个员工类，用于实例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> salary, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get、set方法；重写toString方法；重写equals方法；重写hashCode方法；</span></span><br><span class="line">    <span class="comment">//以上方法为了省略篇幅，所以没有贴出</span></span><br></pre></td></tr></table></figure><p>定义一个Stream测试类，用于初始化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employees employees1 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        Employees employees2 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黑&quot;</span>,<span class="number">12</span>,<span class="number">3000</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        Employees employees3 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黄&quot;</span>,<span class="number">13</span>,<span class="number">4000</span>,<span class="string">&quot;汕头&quot;</span>);</span><br><span class="line">        Employees employees4 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees5 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees6 = <span class="keyword">new</span> Employees(<span class="string">&quot;小肖&quot;</span>,<span class="number">14</span>,<span class="number">6000</span>,<span class="string">&quot;黑龙江&quot;</span>);</span><br><span class="line">        Employees employees7 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Employees&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(employees1);</span><br><span class="line">        list.add(employees2);</span><br><span class="line">        list.add(employees3);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees6);</span><br><span class="line">        list.add(employees7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、操作分类"><a href="#3、操作分类" class="headerlink" title="3、操作分类"></a>3、操作分类</h2><p><img "" class="lazyload placeholder" data-original="https://cdn.nlark.com/yuque/0/2021/png/12668201/1613974359060-9648f65f-6a96-4fdc-9183-03c54cde47b4.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image"></p><ul><li>无状态：指元素的处理不受之前元素的影响；</li><li>有状态：指该操作只有拿到所有元素之后才能继续下去。</li><li>非短路操作：指必须处理所有元素才能得到最终结果；</li><li>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 A || B，只要A为true，则无需判断B的结果。</li></ul><h3 id="3-2-中间操作"><a href="#3-2-中间操作" class="headerlink" title="3.2 中间操作"></a>3.2 中间操作</h3><h2 id="📘-Stream——中间操作"><a href="#📘-Stream——中间操作" class="headerlink" title="📘 Stream——中间操作"></a>📘 Stream——中间操作</h2><h6 id="沿用-Stream-API-中的测试类和数据。"><a href="#沿用-Stream-API-中的测试类和数据。" class="headerlink" title="沿用 Stream API 中的测试类和数据。"></a>沿用 <a href="https://www.yuque.com/eae60m/iwgwlq/cagtia">Stream API</a> 中的测试类和数据。</h6><p>定义一个员工类，用于实例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> salary, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get、set方法；重写toString方法；重写equals方法；重写hashCode方法；</span></span><br><span class="line">    <span class="comment">//以上方法为了省略篇幅，所以没有贴出</span></span><br></pre></td></tr></table></figure><p>定义一个Stream测试类，用于初始化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employees employees1 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        Employees employees2 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黑&quot;</span>,<span class="number">12</span>,<span class="number">3000</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        Employees employees3 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黄&quot;</span>,<span class="number">13</span>,<span class="number">4000</span>,<span class="string">&quot;汕头&quot;</span>);</span><br><span class="line">        Employees employees4 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees5 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees6 = <span class="keyword">new</span> Employees(<span class="string">&quot;小肖&quot;</span>,<span class="number">14</span>,<span class="number">6000</span>,<span class="string">&quot;黑龙江&quot;</span>);</span><br><span class="line">        Employees employees7 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Employees&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(employees1);</span><br><span class="line">        list.add(employees2);</span><br><span class="line">        list.add(employees3);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees6);</span><br><span class="line">        list.add(employees7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-筛选与切片"><a href="#1-筛选与切片" class="headerlink" title="1. 筛选与切片"></a>1. 筛选与切片</h3><h3 id="1-1-过滤-filter"><a href="#1-1-过滤-filter" class="headerlink" title="1.1 过滤 filter"></a>1.1 过滤 filter</h3><p>通过一个断言，排除某些元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//过滤出年龄大于13的Employees</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .filter(emp -&gt; emp.getAge() &gt; <span class="number">13</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1-2-去重-distinct"><a href="#1-2-去重-distinct" class="headerlink" title="1.2 去重 distinct"></a>1.2 去重 distinct</h3><p>distinct 是同时依赖于 equals 方法和 hashCode 方法的，其中一个方法没有正确重写都不会去重成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//去重</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="1-3-截断-limit"><a href="#1-3-截断-limit" class="headerlink" title="1.3 截断 limit"></a>1.3 截断 limit</h3><p>使元素不超过指定数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//截断</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .limit(<span class="number">3</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="1-4-跳过-skip"><a href="#1-4-跳过-skip" class="headerlink" title="1.4 跳过 skip"></a>1.4 跳过 skip</h3><p>去除前n个元素。如果流中元素不足n个，则返回一个空流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//跳过</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .skip(<span class="number">3</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="2-映射"><a href="#2-映射" class="headerlink" title="2. 映射"></a>2. 映射</h3><h3 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h3><p>对流中的每一个元素都进行同一个指定操作，操作结束后最终返回一个新的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//映射</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .map(emp -&gt; emp.getAddress())</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">东莞</span><br><span class="line">深圳</span><br><span class="line">汕头</span><br><span class="line">北京</span><br><span class="line">北京</span><br><span class="line">黑龙江</span><br><span class="line">东莞</span><br></pre></td></tr></table></figure><h3 id="2-2-mapToDouble"><a href="#2-2-mapToDouble" class="headerlink" title="2.2 mapToDouble"></a>2.2 mapToDouble</h3><p>与 map 类似，但是返回类型必须是 Double 型。</p><h3 id="2-3-mapToInt"><a href="#2-3-mapToInt" class="headerlink" title="2.3 mapToInt"></a>2.3 mapToInt</h3><p>与 map 类似，但是返回类型必须是 Int 型。</p><h3 id="2-4-mapToLong"><a href="#2-4-mapToLong" class="headerlink" title="2.4 mapToLong"></a>2.4 mapToLong</h3><p>与 map 类似，但是返回类型必须是 Long 型。</p><h3 id="2-5-flatMap"><a href="#2-5-flatMap" class="headerlink" title="2.5 flatMap"></a>2.5 flatMap</h3><p>将流中的每个值都换成另一个流，然后把所有流连接成一个流。</p><p>这个不太好演示且使用率不太高，可自行搜索</p><h3 id="3-排序"><a href="#3-排序" class="headerlink" title="3. 排序"></a>3. 排序</h3><h3 id="3-1-sorted"><a href="#3-1-sorted" class="headerlink" title="3.1 sorted"></a>3.1 sorted</h3><p>将流中元素按指定顺序（自然排序或者定制排序）排序</p><p>如果是自然排序，则必须实现Comparable接口，如果没有实现会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//自然排序（演示自然排序时为Employees类实现了Comparable接口，实现为按照年龄升序排序）</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .sorted()</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定制排序，使用Comparator匿名类，实现为按照工资升序排序</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .sorted((emp1,emp2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> salary1 = emp1.getSalary();</span><br><span class="line">            <span class="keyword">int</span> salary2 = emp2.getSalary();</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(salary1, salary2);</span><br><span class="line">        &#125;)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]    </span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id="3-3-终止操作"><a href="#3-3-终止操作" class="headerlink" title="3.3 终止操作"></a>3.3 终止操作</h3><h2 id="📘-Stream——终止操作"><a href="#📘-Stream——终止操作" class="headerlink" title="📘 Stream——终止操作"></a>📘 Stream——终止操作</h2><h6 id="📘-沿用-Stream-API-中的测试类和数据。"><a href="#📘-沿用-Stream-API-中的测试类和数据。" class="headerlink" title="📘 沿用 Stream API 中的测试类和数据。"></a>📘 沿用 <a href="https://www.yuque.com/eae60m/iwgwlq/cagtia">Stream API</a> 中的测试类和数据。</h6><p>定义一个员工类，用于实例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> salary, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get、set方法；重写toString方法；重写equals方法；重写hashCode方法；</span></span><br><span class="line">    <span class="comment">//以上方法为了省略篇幅，所以没有贴出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Stream测试类，用于初始化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employees employees1 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        Employees employees2 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黑&quot;</span>,<span class="number">12</span>,<span class="number">3000</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        Employees employees3 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黄&quot;</span>,<span class="number">13</span>,<span class="number">4000</span>,<span class="string">&quot;汕头&quot;</span>);</span><br><span class="line">        Employees employees4 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees5 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees6 = <span class="keyword">new</span> Employees(<span class="string">&quot;小肖&quot;</span>,<span class="number">14</span>,<span class="number">6000</span>,<span class="string">&quot;黑龙江&quot;</span>);</span><br><span class="line">        Employees employees7 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Employees&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(employees1);</span><br><span class="line">        list.add(employees2);</span><br><span class="line">        list.add(employees3);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees6);</span><br><span class="line">        list.add(employees7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-查找与匹配"><a href="#1-查找与匹配" class="headerlink" title="1. 查找与匹配"></a>1. 查找与匹配</h3><h3 id="1-1-是否所有元素匹配指定条件-allMatch"><a href="#1-1-是否所有元素匹配指定条件-allMatch" class="headerlink" title="1.1 是否所有元素匹配指定条件 allMatch"></a>1.1 是否所有元素匹配指定条件 allMatch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//判断是否所有元素的地址都是北京</span></span><br><span class="line">    <span class="keyword">boolean</span> allMatch = list.stream()</span><br><span class="line">        .allMatch(emp -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;北京&quot;</span>.equals(emp.getAddress());</span><br><span class="line">        &#125;);</span><br><span class="line">    System.out.println(allMatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="1-2-是否至少一个元素匹配指定条件-anyMatch"><a href="#1-2-是否至少一个元素匹配指定条件-anyMatch" class="headerlink" title="1.2 是否至少一个元素匹配指定条件 anyMatch"></a>1.2 是否至少一个元素匹配指定条件 anyMatch</h3><p>与 allMatch 类似，可参考 allMatch</p><h3 id="1-3-是否所有元素都不匹配指定条件-noneMatch"><a href="#1-3-是否所有元素都不匹配指定条件-noneMatch" class="headerlink" title="1.3 是否所有元素都不匹配指定条件 noneMatch"></a>1.3 是否所有元素都不匹配指定条件 noneMatch</h3><p>与 allMatch 类似，可参考 allMatch</p><h3 id="1-4-获取第一个元素-findFirst"><a href="#1-4-获取第一个元素-findFirst" class="headerlink" title="1.4 获取第一个元素 findFirst"></a>1.4 获取第一个元素 findFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Optional&lt;Employees&gt; findFirst = list.stream().findFirst();</span><br><span class="line">    Employees employees = findFirst.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="1-5-获取一个随机元素-findAny"><a href="#1-5-获取一个随机元素-findAny" class="headerlink" title="1.5 获取一个随机元素 findAny"></a>1.5 获取一个随机元素 findAny</h3><h6 id="findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。"><a href="#findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。" class="headerlink" title="findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。"></a>findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Optional&lt;Employees&gt; findFirst = list.parallelStream().findAny();</span><br><span class="line">    Employees employees = findFirst.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br></pre></td></tr></table></figure><h3 id="1-6-获取总个数-count"><a href="#1-6-获取总个数-count" class="headerlink" title="1.6 获取总个数 count"></a>1.6 获取总个数 count</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">long</span> count = list.stream().count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="1-7-获取最大值-max"><a href="#1-7-获取最大值-max" class="headerlink" title="1.7 获取最大值 max"></a>1.7 获取最大值 max</h3><p>需要指定一个比较器Comparator，程序使用该比较器的规则来获取最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//查找工资最大的Employees</span></span><br><span class="line">    Optional&lt;Employees&gt; max = list.stream().max((emp1,emp2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> salary1 = emp1.getSalary();</span><br><span class="line">        <span class="keyword">int</span> salary2 = emp2.getSalary();</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(salary1, salary2);</span><br><span class="line">    &#125;);</span><br><span class="line">    Employees employees = max.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id="1-8-获取最小值-min"><a href="#1-8-获取最小值-min" class="headerlink" title="1.8 获取最小值 min"></a>1.8 获取最小值 min</h3><p>需要指定一个比较器Comparator，程序使用该比较器的规则来获取最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//查找年龄最小的Employees</span></span><br><span class="line">    Optional&lt;Employees&gt; min = list.stream().min((emp1,emp2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> age1 = emp1.getAge();</span><br><span class="line">        <span class="keyword">int</span> age2 = emp2.getAge();</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(age1, age2);</span><br><span class="line">    &#125;);</span><br><span class="line">    Employees employees = min.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="2-归约"><a href="#2-归约" class="headerlink" title="2. 归约"></a>2. 归约</h3><h3 id="2-1-reduce"><a href="#2-1-reduce" class="headerlink" title="2.1 reduce"></a>2.1 reduce</h3><p>将流中所有元素或者所有元素的某个属性值反复组合起来，最终得到一个值</p><p>在执行第一遍操作时，是将指第一个元素作为 x ，第二个元素作为 y 相组合。在执行第一遍以后的操作时，是将第一遍操作的结果作为 x ，上一次操作后面的下一个元素作为 y 相组合。直到所有元素组合完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//求所有工资总和（先用map取出所有工资，再用reduce相加）</span></span><br><span class="line">    Optional&lt;Integer&gt; reduce = list.stream()</span><br><span class="line">        .map(emp -&gt; emp.getSalary())</span><br><span class="line">        .reduce((sal1,sal2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> sal1 + sal2;</span><br><span class="line">        &#125;);</span><br><span class="line">    Integer total = reduce.get();</span><br><span class="line">    System.out.println(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><p>也可以指定初始值。那么在执行第一遍操作时是将指定的初始值作为 x 与流中的第一个元素作为 y 相组合。</p><p>这样子也能更好地避免空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//求所有工资总和（先用map取出所有工资，再用reduce相加(同时指定初始值为0)）</span></span><br><span class="line">    Integer total = list.stream()</span><br><span class="line">            .map(emp -&gt; emp.getSalary())</span><br><span class="line">            .reduce(<span class="number">0</span>, (sal1,sal2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> sal1 + sal2;</span><br><span class="line">        &#125;);</span><br><span class="line">    System.out.println(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="3-收集"><a href="#3-收集" class="headerlink" title="3. 收集"></a>3. 收集</h3><h3 id="3-1-collect"><a href="#3-1-collect" class="headerlink" title="3.1 collect"></a>3.1 collect</h3><p>将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法。</p><p>而且一般情况下我们不需要真的去实现 Collector 接口，已经有一个工具类 Collectors 提供了大量的 API</p><p>Collectors 工具类可自己去做了解，里面的 API 非常多，能完成非常多的需求，功能强大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//汇总为set</span></span><br><span class="line">    Set&lt;Employees&gt; set = list.stream().collect(Collectors.toSet());</span><br><span class="line">    set.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br></pre></td></tr></table></figure><h3 id="4-内部迭代"><a href="#4-内部迭代" class="headerlink" title="4. 内部迭代"></a>4. 内部迭代</h3><h3 id="4-1-forEach"><a href="#4-1-forEach" class="headerlink" title="4.1 forEach"></a>4.1 forEach</h3><p>太简单了不写了，就和for循环差不多的</p><h1 id="📘-Optional"><a href="#📘-Optional" class="headerlink" title="📘 Optional"></a>📘 Optional</h1><p>java . util. Optional 是在 Java 8 中引入，用于解决空指针异常的一个工具。</p><p>它更像是一个容器类，用于代表一个值存在或者不存在。在 JDK 8 以前，用 null 值来表示一个值不存在。现在使用 Optional 可以更好的表达这个概念。</p><h2 id="创建-Optional-实例"><a href="#创建-Optional-实例" class="headerlink" title="创建 Optional 实例"></a>创建 Optional 实例</h2><h3 id="Optional-of-T-value"><a href="#Optional-of-T-value" class="headerlink" title="Optional.of(T value)"></a>Optional.of(T value)</h3><p>用于创建一个 Optioal 的类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：创建一个 Option 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:17:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.of(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是需要注意的是，<strong>Optional 类虽然是 Java 8 中用于避免空指针的工具类，但是它的 of 方法不能接收一个 null</strong>；所以在实际使用中，使用 of 方法构造 Optional 类的实例的时候，需要避免从其他地方传来的用于构造 Optiaonal 实例的值是 null；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：使用 null 构造 Optional 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:23:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.of(<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//会产生 java.lang.NullPointerException 异常。</span></span><br><span class="line">&#125;java</span><br></pre></td></tr></table></figure><p>但是这仍然极大的提高了 debug 空指针异常的错误。在 JDK 8 以前发生空指针的时候不知道是哪一步发生了空指针；现在如果使用 Optional 类，那么极大可能是在 of 方法中发生空指针。</p><h3 id="Optional-empty"><a href="#Optional-empty" class="headerlink" title="Optional.empty()"></a>Optional.empty()</h3><p>创建一个空的 Optional 的类的实例，用于补充 of 方法的参数值为 null 的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：创建一个空的 Option 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:39:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建,此时 op 中是没有值的</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-ofNullable-T-value"><a href="#Optional-ofNullable-T-value" class="headerlink" title="Optional.ofNullable(T value)"></a>Optional.ofNullable(T value)</h3><p>of 方法和 empty 方法的结合体，更优雅，代码阅读性也更好，实际使用推荐此方法。</p><p>若 value 的值不为 null，则调用 of 方法返回一个值为 value 的 Optional 的类的实例；否则调用 empty 方法返回一个空的 Optional 的类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：创建一个 Option 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:39:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 底层代码就是使用了一个三元表达式，去判断使用 of 方法还是 empty 方法，如下所示</span></span><br><span class="line"><span class="comment">     * public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123;</span></span><br><span class="line"><span class="comment">     *      return value == null ? empty() : of(value);</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断-Optional-实例是否有值-值是否为空"><a href="#判断-Optional-实例是否有值-值是否为空" class="headerlink" title="判断 Optional 实例是否有值/值是否为空"></a>判断 Optional 实例是否有值/值是否为空</h2><h3 id="Optional-isPresent"><a href="#Optional-isPresent" class="headerlink" title="Optional.isPresent()"></a>Optional.isPresent()</h3><p>用于判断 Optional 实例中包含的值是否null；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：判断 Optional 实例是否有值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">boolean</span> pre_01 = op_01.isPresent();</span><br><span class="line">    <span class="keyword">boolean</span> pre_02 = op_02.isPresent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(pre_01); <span class="comment">//输出 true</span></span><br><span class="line">    System.out.println(pre_02); <span class="comment">//输出 false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理-Option-实例中的值"><a href="#处理-Option-实例中的值" class="headerlink" title="处理 Option 实例中的值"></a>处理 Option 实例中的值</h2><h3 id="Optional-map-Function-mapper"><a href="#Optional-map-Function-mapper" class="headerlink" title="Optional.map(Function mapper)"></a>Optional.map(Function mapper)</h3><p>对 Optional 实例中的值执行指定的操作，操作结束后返回一个包含着新值的新的 Optional 实例。</p><p>如果原来的 Optional 实例的值为空，则不进行操作，仍然返回一个 empty 的 Option 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：处理 Option 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午3:34:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(op_01.hashCode());   <span class="comment">//1450575459</span></span><br><span class="line">    System.out.println(op_02.hashCode());   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理</span></span><br><span class="line">    Optional&lt;String&gt; op_03 = op_01.map(str -&gt; str += <span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_04 = op_02.map(str -&gt; str += <span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">    System.out.println(op_03.hashCode());   <span class="comment">//-1006303071</span></span><br><span class="line">    System.out.println(op_04.hashCode());   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_03.orElse(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">    String str_02 = op_04.orElse(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456abcdefg</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//xyz</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-flatMap-Function-mapper"><a href="#Optional-flatMap-Function-mapper" class="headerlink" title="Optional.flatMap(Function mapper)"></a>Optional.flatMap(Function mapper)</h3><p>与 map 方法类似。</p><p>但是 map 方法中，Function 实现类的返回值不会直接被返回，而是会被再包装一层 Optional 类，即“Function 实现类的返回值” -&gt;“Optional&lt;Function 实现类的返回值&gt;”；</p><p>而在 flatMap 中返回值保持不变，即直接返回 Function 实现类的返回值，但要求 Function 实现类的返回值必须是 Optional 类型，即“Optional&lt;返回值&gt;” -&gt; “Optional&lt;返回值&gt;”。</p><p>这么做的好处是为了避免 map 方法中返回的是一个 Option 类的实例，从而导致调用完 map 方法后得到的返回值是一个 Optional&lt;Optional&lt;真正的值&gt;&gt; 这种嵌套结构的结果。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：处理 Option 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午3:34:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理</span></span><br><span class="line">    Optional&lt;Optional&lt;String&gt;&gt; op_03 = op_01.map(str -&gt; Optional.ofNullable(str));</span><br><span class="line">    Optional&lt;String&gt; op_04 = op_02.flatMap(str -&gt; Optional.ofNullable(str));    <span class="comment">//与 map方法做比较，能看到map方法返回值是一个Optional&lt;Optional&lt;真正的值&gt;&gt;的嵌套结构的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_03.orElse(Optional.ofNullable(<span class="string">&quot;xyz&quot;</span>)).orElse(<span class="string">&quot;xyz&quot;</span>);     <span class="comment">//可以看出在这种嵌套结构的结果上，取值更为麻烦</span></span><br><span class="line">    String str_02 = op_04.orElse(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//xyz</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取-Optional-实例中的值"><a href="#获取-Optional-实例中的值" class="headerlink" title="获取 Optional 实例中的值"></a>获取 Optional 实例中的值</h2><h3 id="Optional-get"><a href="#Optional-get" class="headerlink" title="Optional.get()"></a>Optional.get()</h3><p>直接获取 Optional 实例中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：直接获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str = op.get();</span><br><span class="line">    System.out.println(str);    <span class="comment">//输出 123456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但是需要注意的是，如果 Optional 实例中的值为空，get 方法会抛出 java.util.NoSuchElementException 异常。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：直接获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str = op.get();</span><br><span class="line">    System.out.println(str);    <span class="comment">//抛出异常 java.util.NoSuchElementException</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-orElse-T-other"><a href="#Optional-orElse-T-other" class="headerlink" title="Optional.orElse(T other)"></a>Optional.orElse(T other)</h3><p>get 方法的升级方法，用于避免 get 方法获取 Optional 实例的值时，值为空时抛出异常的情况。</p><p>如果 Optional 实例有值时，则返回 Optional 实例的值；否则返回传入的参数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_01.orElse(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">    String str_02 = op_02.orElse(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//abcdefg</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-orElseGet-Supplier-other"><a href="#Optional-orElseGet-Supplier-other" class="headerlink" title="Optional.orElseGet(Supplier other)"></a>Optional.orElseGet(Supplier other)</h3><p>orElse 方法的升级方法，比起 orElse 方法的固定值，可以更动态的决定当 Optional 实例的值为空时，返回一个什么样的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个随机数</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="keyword">new</span> Random().nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_01.orElseGet(() -&gt; i%<span class="number">2</span> == <span class="number">0</span>?<span class="string">&quot;abc&quot;</span>:<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">    String str_02 = op_02.orElseGet(() -&gt; i%<span class="number">2</span> == <span class="number">0</span>?<span class="string">&quot;abc&quot;</span>:<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//abc 或者 xyz，取决于 i 是奇数还是偶数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>easypoi导出.md</title>
      <link href="/2021/06/18/easypoi%E5%AF%BC%E5%87%BA/"/>
      <url>/2021/06/18/easypoi%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="导出word"><a href="#导出word" class="headerlink" title="导出word"></a>导出word</h3><p>先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 涉密岗位登记导出docx</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vxSecretPersonApply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/downloadSecretRank&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">downloadSecretRank</span><span class="params">(HttpServletRequest request, VxSecretPersonApply vxSecretPersonApply)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> String property = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"> <span class="comment">// Step.1 组装查询条件查询数据</span></span><br><span class="line"> QueryWrapper&lt;VxSecretPersonApply&gt; queryWrapper = QueryGenerator.initQueryWrapper(vxSecretPersonApply, request.getParameterMap());</span><br><span class="line"> LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//Step.2 获取导出数据</span></span><br><span class="line"> List&lt;VxSecretPersonApply&gt; queryList = vxSecretPersonApplyService.list(queryWrapper);</span><br><span class="line"> <span class="comment">// 过滤选中数据</span></span><br><span class="line"> String selections = request.getParameter(<span class="string">&quot;selections&quot;</span>);</span><br><span class="line"> List&lt;VxSecretPersonApply&gt; vxSecretPersonApplyList = <span class="keyword">new</span> ArrayList&lt;VxSecretPersonApply&gt;();</span><br><span class="line"> <span class="keyword">if</span>(oConvertUtils.isEmpty(selections)) &#123;</span><br><span class="line">    vxSecretPersonApplyList = queryList;</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    List&lt;String&gt; selectionList = Arrays.asList(selections.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">    vxSecretPersonApplyList = queryList.stream().filter(item -&gt; selectionList.contains(item.getId())).collect(Collectors.toList());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> List&lt;VxSecretPersonApplyPage&gt; pageList = <span class="keyword">new</span> ArrayList&lt;VxSecretPersonApplyPage&gt;();</span><br><span class="line"> TemplateExportParams params = getTemplateParams(property,<span class="string">&quot;涉密岗位登记表&quot;</span>,<span class="string">&quot;docx&quot;</span>);  <span class="comment">//获取模板</span></span><br><span class="line"> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line"> SecretPersonExportXls secretPersonExportXls = <span class="keyword">new</span> SecretPersonExportXls();</span><br><span class="line"> <span class="comment">//构造数据</span></span><br><span class="line"> map = secretPersonExportXls.getSecretRank(vxSecretPersonApplyList, map, sysBaseAPI,secretJobsService);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Step.4 easyPoi 导出Excel</span></span><br><span class="line"> ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> EasypoiTemplateWordView());</span><br><span class="line"> mv.addObject(TemplateWordConstants.FILE_NAME, <span class="string">&quot;涉密岗位登记表&quot;</span>);</span><br><span class="line"> mv.addObject(TemplateWordConstants.URL,params.getTemplateUrl());</span><br><span class="line"> mv.addObject(TemplateWordConstants.MAP_DATA,map);</span><br><span class="line"> <span class="keyword">return</span> mv;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4.导出</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>java.lang.NoSuchMethodException: org.openxmlformats.schemas.wordprocessingml.x2006.main.impl.CTPictureBaseImpl错误</p><p>使用poi对office文档进行操作的时候,出现以下异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodException: org.openxmlformats.schemas.wordprocessingml.x2006.main.impl.CTPictureBaseImpl.&lt;init&gt;(org.apache.xmlbeans.SchemaType, boolean)</span><br><span class="line">at java.lang.Class.getConstructor0(Unknown Source)</span><br><span class="line">at java.lang.Class.getDeclaredConstructor(Unknown Source)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.getJavaImplConstructor2(SchemaTypeImpl.java:<span class="number">1817</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.createUnattachedSubclass(SchemaTypeImpl.java:<span class="number">1961</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.createUnattachedNode(SchemaTypeImpl.java:<span class="number">1950</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.createElementType(SchemaTypeImpl.java:<span class="number">1051</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.values.XmlObjectBase.create_element_user(XmlObjectBase.java:<span class="number">938</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Xobj.getUser(Xobj.java:<span class="number">1675</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cur.getUser(Cur.java:<span class="number">2659</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cur.getObject(Cur.java:<span class="number">2652</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cursor._getObject(Cursor.java:<span class="number">995</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cursor.getObject(Cursor.java:<span class="number">2904</span>)</span><br><span class="line">at org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:<span class="number">169</span>)</span><br><span class="line">at org.apache.poi.xwpf.usermodel.XWPFDocument.&lt;init&gt;(XWPFDocument.java:<span class="number">119</span>)</span><br><span class="line">at search.utils.POI.readWord(POI.java:<span class="number">169</span>)</span><br><span class="line">at search.service.ThreadManage.executive(ThreadManage.java:<span class="number">115</span>)</span><br><span class="line">at search.service.ThreadManage.run(ThreadManage.java:<span class="number">214</span>)</span><br><span class="line">at java.lang.Thread.run(Unknown Source)</span><br></pre></td></tr></table></figure><p>实际在项目中已经引入poi-ooxml-schemas-3.17.jar这个包，但是却一直报找不到类的异常。然后查poi官网资料(<a href="http://poi.apache.org/faq.html)%E5%BE%97%E7%9F%A5poi%E6%8F%90%E4%BE%9B%E7%9A%84%E9%82%A3%E4%B8%AApoi-ooxml-schemas-3.17.jar%E5%8C%85%E6%98%AF%E7%B2%BE%E7%AE%80%E7%89%88%E7%9A%84%EF%BC%8C%E4%B8%BA%E4%BA%86%E8%8A%82%E7%9C%81%E7%A9%BA%E9%97%B4%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%94%BE%E7%9A%84%E5%8F%AA%E6%9C%89%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A6%81%E5%BC%95%E7%94%A8%E5%8F%A6%E5%A4%96%E4%B8%80%E4%BA%9B%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%9D%E5%B0%B1%E9%9C%80%E8%A6%81%E5%BC%95%E7%94%A8%E5%AE%8C%E6%95%B4%E7%89%88%E7%9A%84ooxml-schemas.jar%E5%8C%85%E3%80%82%E5%8F%A6%E5%A4%96%EF%BC%8CPOI">http://poi.apache.org/faq.html)得知poi提供的那个poi-ooxml-schemas-3.17.jar包是精简版的，为了节省空间，里面放的只有一些常用的模块，所以要引用另外一些功能的话就需要引用完整版的ooxml-schemas.jar包。另外，POI</a> 3.14以上版本对应的完整版的jar包是ooxml-schemas-1.3.jar，这样导入之后果然就好了。 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QueryWrapper常用方法.md</title>
      <link href="/2021/06/18/mybatis%20plus%20%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8queryWrapper/"/>
      <url>/2021/06/18/mybatis%20plus%20%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8queryWrapper/</url>
      
        <content type="html"><![CDATA[<p>首先奉上mybatis plus的官方文档链接，再看本博客有不清晰的地方，可以查看文档<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p><h3 id="一、queryWrapper是什么"><a href="#一、queryWrapper是什么" class="headerlink" title="一、queryWrapper是什么"></a>一、queryWrapper是什么</h3><p>queryWrapper是mybatis plus中实现查询的对象封装操作类，他的层级关系如下</p><p><img "" class="lazyload placeholder" data-original="https://img-blog.csdn.net/20181001173726837?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDM0Mjk0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="å¨è¿éæå¥å¾çæè¿°"></p><p>在上面的图片中，</p><p>Wrapper ： 条件构造抽象类，最顶端父类，抽象类中提供4个方法西面贴源码展示<br>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<br>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。<br>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper<br>LambdaUpdateWrapper ： Lambda 更新封装Wrapper<br>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法<br>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</p><h3 id="二、使用demo"><a href="#二、使用demo" class="headerlink" title="二、使用demo"></a>二、使用demo</h3><p>使用的关键的代码<br>QueryWrapper<PbListBlack> sectionQueryWrapper = new QueryWrapper&lt;&gt;();<br>sectionQueryWrapper.eq(“OPTYPE”, 1);<br>sectionQueryWrapper.eq(“BLTYPE”, 1);<br>List<PbListBlack> pbListBlacks = iPbListBlackMapper.selectList(sectionQueryWrapper);<br>上面这段代码的意思就是，首先新建一个QueryWrapper对象，类型为PbListBlack对象，也就是你需要查询的实体数据，</p><p>sectionQueryWrapper.eq(“OPTYPE”, 1);</p><p>sectionQueryWrapper.eq(“BLTYPE”, 1);</p><p>这两句的意思是PbListBlack对象对应的数据库表中的OPTYPE，BLTYPE字段值要为1</p><p>然后调用iPbListBlackMapper.selectList方法，入参就为前面新建好的查询对象封装类</p><p>下面贴上查询实体的代码</p><p>@Data<br>@EqualsAndHashCode(callSuper = false)<br>@Accessors(chain = true)<br>@TableName(“PB_LIST_BLACK”)<br>@ApiModel(value = “PB_LIST_BLACK对象”, description = “”)<br>public class PbListBlack extends Model<PbListBlack> {<br>   @TableField(“ID”)<br>   private Long id;</p><p>   @TableField(“USERID”)<br>   private String userId;<br>   @TableField(“SPGATE”)<br>   private String spgate;<br>   @TableField(“SPNUMBER”)<br>   private String spnumber;<br>   @TableField(“PHONE”)<br>   private Long phone;<br>   @TableField(“OPTYPE”)<br>   private Integer optype;<br>   @TableField(“OPTTIME”)<br>   private Timestamp optTime;<br>   @TableField(“CORPCODE”)<br>   private String corpCode;<br>   @TableField(“SVRTYPE”)<br>   private String svrType;</p><p>   @TableField(“MSG”)<br>   private String msg = “ “;</p><p>   @ApiModelProperty(value = “黑名单类型。1：短信；2：彩信”)<br>   @TableField(“BLTYPE”)<br>   private Integer blType;</p><p>}<br>然后是iPbListBlackMapper的代码‘，代码很简单</p><p>@Repository<br>public interface IPbListBlackMapper extends BaseMapper<PbListBlack> {<br>}<br>仅仅只需要基层BaseMapper接口即可，这样mybatis plus底层封装的方法即可实现帮你查询你设置查询条件查询到的数据</p><p>当你的Mapper 继承BaseMapper接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</p><h3 id="三、QueryWrapper的方法"><a href="#三、QueryWrapper的方法" class="headerlink" title="三、QueryWrapper的方法"></a>三、QueryWrapper的方法</h3><p><img "" class="lazyload placeholder" data-original="https://img-blog.csdn.net/20181001202710403?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDM0Mjk0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="å¨è¿éæå¥å¾çæè¿°">四、总结<br>上面的博客内容虽然简单，也只展示了一个查询的功能。在你实际使用的时候，可以按照  条件构造器上面包含的的方法，设置你查询数据的条件，调用BaseMapper里相应的方法即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客.md</title>
      <link href="/2021/06/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/06/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h4 id="1-根据目的来分"><a href="#1-根据目的来分" class="headerlink" title="1. 根据目的来分"></a>1. 根据目的来分</h4><p>根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种。</p><ol><li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</li><li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</li><li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</li></ol><h4 id="2-根据作用范围来分"><a href="#2-根据作用范围来分" class="headerlink" title="2. 根据作用范围来分"></a>2. 根据作用范围来分</h4><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。</p><ol><li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。</li><li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。</li></ol><p>表 1 介绍了这 23 种设计模式的分类。</p><table><thead><tr><th>范围\目的</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr><td>类模式</td><td>工厂方法</td><td>(类）适配器</td><td>模板方法、解释器</td></tr><tr><td>对象模式</td><td>单例 原型 抽象工厂 建造者</td><td>代理 (对象）适配器 桥接 装饰 外观 享元 组合</td><td>策略 命令 职责链 状态 观察者 中介者 迭代器 访问者 备忘录</td></tr></tbody></table><h4 id="3-GoF的23种设计模式的功能"><a href="#3-GoF的23种设计模式的功能" class="headerlink" title="3. GoF的23种设计模式的功能"></a>3. GoF的23种设计模式的功能</h4><p>前面说明了 GoF 的 23 种设计模式的分类，现在对各个模式的功能进行介绍。</p><ol><li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li><li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li><li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li><li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li><li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li><li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li><li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li><li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li><li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li><li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li><li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li><li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li><li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li><li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li><li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li><li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li></ol><p>UML（Unified Modeling Language，统一建模语言）是用来设计软件蓝图的可视化建模语言，是一种为面向对象系统的产品进行说明、可视化和编制文档的标准语言，独立于任何一种具体的程序设计语言。</p><p>1997 年 UML 被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>UML 能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。</p><p>UML 具有很宽的应用领域。其中最常用的是建立软件系统的模型，但它同样可以用于描述非软件领域的系统，如机械系统、企业机构或业务过程，以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之，UML 可以对任何具有静态结构和动态行为的系统进行建模，而且使用于从需求规格描述直至系统完成后的测试和维护等系统开发的各个阶段。</p><p>UML 模型大多以图表的方式表现出来，一份典型的建模图表通常包含几个块或框、连接线和作为模型附加信息的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。</p><p>在这里大家可能会疑问，UML 明明是一种图形，为什么说是语言呢？</p><p>语言是包括文字和图形的，有很多内容文字是无法表达的。你见过建筑设计图纸吗？里面还不是很多图形，光用文字能表达清楚建筑设计吗？在建筑界，有一套标准来描述设计，同样道理，在软件开发界，我们也需要一套标准来帮助我们做好软件开发的工作。UML 就是其中的一种标准，注意这可不是唯一标准，只是 UML 是大家比较推崇的一种标准而已。UML 并不是强制性标准，没有规定在软件开发中一定要用 UML，但是我们需要包括 UML 在内的各种标准，来提高我们软件开发的水平。</p><h2 id="基本构件"><a href="#基本构件" class="headerlink" title="基本构件"></a>基本构件</h2><p>UML 建模的核心是模型，模型是现实的简化、真实系统的抽象。UML 提供了系统的设计蓝图。当给软件系统建模时，需要采用通用的符号语言，这种描述模型所使用的语言被称为建模语言。在 UML 中，所有的描述由事物、关系和图这些构件组成。下图完整地描述了所有构件的关系。</p><p><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z10944153K.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="UML基本构件图"></p><p>下面对上图中的构件进行说明。</p><h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><p>事物是抽象化的最终结果，分为结构事物、行为事物、分组事物和注释事物。</p><h4 id="1-结构事物"><a href="#1-结构事物" class="headerlink" title="1. 结构事物"></a>1. 结构事物</h4><p>结构事物是模型中的静态部分，用以呈现概念或实体的表现元素，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>图例</th></tr></thead><tbody><tr><td>类（Class）</td><td>具有相同属性、方法、关系和语义的对象集合</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1100S62Y.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>接口（Interface）</td><td>指一个类或构件的一个服务的操作集合，它仅仅定义了一组操作的规范，并没有给出这组操作的具体实现</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1101120163.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>用例（User Case）</td><td>指对一组动作序列的描述，系统执行这些动作将产生一个对特定的参与者（Actor）有价值且可观察的结果</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1101355293.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>协作（Collaboration）</td><td>定义元素之间的相互作用</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1101541915.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>组件（Component）</td><td>描述物理系统的一部分</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1102250437.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>活动类（Active Class）</td><td>指对象有一个或多个进程或线程。活动类和类很相象，只是它的对象代表的元素的行为和其他元素是同时存在的</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1104602M2.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>节点（Node）</td><td>定义为运行时存在的物理元素</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z11046434W.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><h4 id="2-行为事物"><a href="#2-行为事物" class="headerlink" title="2. 行为事物"></a>2. 行为事物</h4><p>行为事物指 UML 模型中的动态部分，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>用例</th></tr></thead><tbody><tr><td>交互（Interaction）</td><td>包括一组元素之间的消息交换</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1105G5541.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>状态机（State Machine）</td><td>由一系列对象的状态组成</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1105K5108.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><h4 id="3-分组事物"><a href="#3-分组事物" class="headerlink" title="3. 分组事物"></a>3. 分组事物</h4><p>目前只有一种分组事物，即包。包纯碎是概念上的，只存在于开发阶段，结构事物、行为事物甚至分组事物都有可能放在一个包中，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>用例</th></tr></thead><tbody><tr><td>包（Package）</td><td>UML中唯一的组织机制</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1105Z4P0.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><h4 id="4-注释事物"><a href="#4-注释事物" class="headerlink" title="4. 注释事物"></a>4. 注释事物</h4><p>注释事物是解释 UML 模型元素的部分，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>用例</th></tr></thead><tbody><tr><td>注释（Note）</td><td>用于解析说明 UML 元素</td><td><img "" class="lazyload placeholder" data-original="http://c.biancheng.net/uploads/allimg/200901/5-200Z1110006149.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><blockquote><p>关于 UML 中的关系，我们在《<a href="http://c.biancheng.net/view/8374.html">UML类图及类图之间的关系</a>》一节讲解。</p></blockquote><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>UML2.0 一共有 13 种图（UML1.5 定义了 9 种，UML2.0 增加了 4 种），分别是类图、对象图、构件图、部署图、活动图、状态图、用例图、时序图、协作图 9 种，以及包图、组合结构图、时间图、交互概览图 4 种。</p><table><thead><tr><th>图名称</th><th>解释</th></tr></thead><tbody><tr><td>类图（Class Diagrams）</td><td>用于定义系统中的类</td></tr><tr><td>对象图（Object Diagrams）</td><td>类图的一个实例，描述了系统在具体时间点上所包含的对象及各个对象之间的关系</td></tr><tr><td>构件图（Component Diagrams）</td><td>一种特殊的 UML 图，描述系统的静态实现视图</td></tr><tr><td>部署图（Deployment Diagrams）</td><td>定义系统中软硬件的物理体系结构</td></tr><tr><td>活动图（Activity Diagrams）</td><td>用来描述满足用例要求所要进行的活动及活动间的约束关系</td></tr><tr><td>状态图（State Chart Diagrams）</td><td>用来描述类的对象的所有可能的状态和时间发生时，状态的转移条件</td></tr><tr><td>用例图（Usecase Diagrams）</td><td>用来描述用户的需求，从用户的角度描述系统的功能，并指出各功能的执行者，强调谁在使用系统、系统为执行者完成哪些功能</td></tr><tr><td>时序图（Sequence Diagrams）</td><td>描述对象之间的交互顺序，着重体现对象间消息传递的时间顺序，强调对象之间消息的发送顺序，同时显示对象之间的交互过程</td></tr><tr><td>协作图（Collaboration Diagrams）</td><td>描述对象之间的合作关系，更侧重向用户对象说明哪些对象有消息的传递</td></tr><tr><td>包图（Package Diagrams）</td><td>对构成系统的模型元素进行分组整理的图</td></tr><tr><td>组合结构图（Composite Structure Diagrams）</td><td>表示类或者构建内部结构的图</td></tr><tr><td>时间图（Timing Diagrams）</td><td>用来显示随时间变化，一个或多个元素的值或状态的更改，也显示时间控制事件之间的交互及管理它们的时间和期限约束</td></tr><tr><td>交互概览图（Interaction Overview Diagrams）</td><td>用活动图来表示多个交互之间的控制关系的图</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
