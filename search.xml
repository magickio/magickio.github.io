<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis</title>
      <link href="/2021/11/26/Mybatis/"/>
      <url>/2021/11/26/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-接口式编程-Hello-World"><a href="#MyBatis-接口式编程-Hello-World" class="headerlink" title="MyBatis 接口式编程 Hello World"></a>MyBatis 接口式编程 Hello World</h1><p>搭建环境</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h4 id="搭建数据库MySQL"><a href="#搭建数据库MySQL" class="headerlink" title="搭建数据库MySQL"></a>搭建数据库MySQL</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">  `pwd` varchar(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`name`, `pwd`) VALUES (&#x27;hong&#x27;, &#x27;<span class="number">123456</span>&#x27;);</span><br><span class="line">INSERT INTO `user`(`name`, `pwd`) VALUES (&#x27;Tom&#x27;, &#x27;<span class="number">123456</span>&#x27;);</span><br><span class="line">INSERT INTO `user`(`name`, `pwd`) VALUES (&#x27;Jerry&#x27;, &#x27;<span class="number">123456</span>&#x27;);</span><br></pre></td></tr></table></figure><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h4 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-接口"><a href="#Mapper-接口" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-xml-文件"><a href="#Mapper-xml-文件" class="headerlink" title="Mapper.xml 文件"></a>Mapper.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间, 对应接口的全类名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select: 配置查询</span></span><br><span class="line"><span class="comment">        id: 唯一标识, 对应接口中的方法名</span></span><br><span class="line"><span class="comment">        resultType: 返回值类型, 类的全类名, 如果返回值是集合写集合中泛型的类型</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="MyBatis-核心配置文件"><a href="#MyBatis-核心配置文件" class="headerlink" title="MyBatis 核心配置文件"></a>MyBatis 核心配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- configuration: 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">properties: 引入外部properties文件 必须放在最前面,否则会报错</span></span><br><span class="line"><span class="comment">resource: 类路径下</span></span><br><span class="line"><span class="comment">url: 磁盘路径或网络路径</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 设置日志输出, 方便观察sql语句和参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments配置项目的运行环境, 可以配置多个</span></span><br><span class="line"><span class="comment">        default: 启用的环境</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册!!! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/hong/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// MyBatis全局配置文件路径</span></span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取MyBatis全局配置文件的输入流</span></span><br><span class="line">        InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">// 获取SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、获取SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取SqlSession对象</span></span><br><span class="line">        SqlSession openSession = factory.openSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3、获取接口的实现类对象</span></span><br><span class="line">            <span class="comment">// 会为接口自动创建代理对象, 代理对象去执行增删改查方法, sql语句会从mapper.xml中获取</span></span><br><span class="line">            UserMapper mapper = openSession.getMapper(UserMapper.class);</span><br><span class="line">            List&lt;User&gt; list = mapper.getAll();</span><br><span class="line">            list.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4、SqlSession代表和数据库的一次对话, 用完必须关闭</span></span><br><span class="line">            openSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制台打印"><a href="#控制台打印" class="headerlink" title="控制台打印"></a>控制台打印</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 发送的sql语句就是我们在mapper.xml中配置的sql语句</span></span></span><br><span class="line">[org.hong.mapper.UserMapper.getAll]-==&gt;  Preparing: select * from user </span><br><span class="line">[org.hong.mapper.UserMapper.getAll]-==&gt; Parameters: </span><br><span class="line">[org.hong.mapper.UserMapper.getAll]-&lt;==      Total: 4</span><br><span class="line">User(id=1, name=hong, pwd=123456)</span><br><span class="line">User(id=2, name=Tom, pwd=123456)</span><br><span class="line">User(id=3, name=Jerry, pwd=123456)</span><br></pre></td></tr></table></figure><h2 id="CRUD-初体验"><a href="#CRUD-初体验" class="headerlink" title="CRUD 初体验"></a>CRUD 初体验</h2><p>接着上面的来！！！</p><h3 id="MyBatisUtil-工具类"><a href="#MyBatisUtil-工具类" class="headerlink" title="MyBatisUtil 工具类"></a>MyBatisUtil 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// openSession(): 此方式打开SQL会话, 事务是开启状态</span></span><br><span class="line">        <span class="comment">// openSession(true): 此方式打开SQL会话, 事务是关闭状态</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="save"><a href="#save" class="headerlink" title="save"></a>save</h3><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    inserte: 配置insert语句</span></span><br><span class="line"><span class="comment">        id: 对应的方法名</span></span><br><span class="line"><span class="comment">        parameterType: 指定参数类型为pojo, 可以直接写属性名获得属性值, 优先调用getting方法, 如果没有getting方法则直接从属性中取值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user(name, pwd) values(#&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;SAVE&quot;</span>);</span><br><span class="line">    user.setPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> save = mapper.save(user);</span><br><span class="line">    System.out.println(save);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 发送的sql语句</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] ==&gt;  Preparing: insert into user(name, pwd) values(?, ?) </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 预编译放入的参数值, 从传入的pojo对象中取出对应的属性值</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] ==&gt; Parameters: SAVE(String), 123(String)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 影响行数</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] &lt;==    Updates: 1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 编写的save方法返回的值int类型, 意义是数据库影响行数</span></span></span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 插入后的对象打印, id值并没有回填到对象中, 因为我们没有开启这个功能, 后面会说到</span></span></span><br><span class="line">User(id=null, name=SAVE, pwd=123)</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据id查询</span></span><br><span class="line"><span class="function">User <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法参数是int类型的, 所以没有写parameterType属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插入id值 --&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">User(id=1, name=hong, pwd=123456)</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;谢禹宏&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> update = mapper.update(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查询sql</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] &lt;==      Total: 1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改sql</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.update]-[DEBUG] ==&gt;  Preparing: update user set name = ?, pwd = ? where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.update]-[DEBUG] ==&gt; Parameters: 谢禹宏(String), 123456(String), 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.update]-[DEBUG] &lt;==    Updates: 1</span><br><span class="line">User(id=1, name=谢禹宏, pwd=123456)</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    <span class="keyword">boolean</span> delete = mapper.delete(<span class="number">10</span>);</span><br><span class="line">    System.out.println(delete);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.UserMapper.delete]-[DEBUG] ==&gt;  Preparing: delete from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.delete]-[DEBUG] ==&gt; Parameters: 10(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.delete]-[DEBUG] &lt;==    Updates: 0</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 因为我们删除一个不存在的数据, 影响行数为0, 所以MyBatis返回false</span></span></span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><h4 id="Mapper-接口-1"><a href="#Mapper-接口-1" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询</span></span><br><span class="line">    <span class="function">User <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        inserte: 配置insert语句</span></span><br><span class="line"><span class="comment">            id: 对应的方法名</span></span><br><span class="line"><span class="comment">            parameterType: 指定参数类型为pojo, 可以直接写属性名获得属性值, 优先调用getting方法, 如果没有getting方法则直接从属性中取值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user(name, pwd) values(#&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方法参数是int类型的, 所以没有写parameterType属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插入id值 --&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-1"><a href="#测试用例-1" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;SAVE ID&quot;</span>);</span><br><span class="line">        user.setPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> save = mapper.save(user);</span><br><span class="line">        System.out.println(save);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;谢禹宏&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> update = mapper.update(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        <span class="keyword">boolean</span> delete = mapper.delete(<span class="number">10</span>);</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="save-回填主键值"><a href="#save-回填主键值" class="headerlink" title="save 回填主键值"></a>save 回填主键值</h2><p>在上面 save 的基础上进行更改</p><h3 id="获取自增主键的值"><a href="#获取自增主键的值" class="headerlink" title="获取自增主键的值"></a>获取自增主键的值</h3><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    useGeneratedKeys=&quot;true&quot;: 开启获取自增主键的策略</span></span><br><span class="line"><span class="comment">    keyColumn: 指定数据库主键的列名</span></span><br><span class="line"><span class="comment">    keyProperty: 指定对应的主键属性, ps(获取到主键值后, 将这个值封装给javaBean的哪个属性)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into user(name, pwd) values(#&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;SAVE ID&quot;</span>);</span><br><span class="line">    user.setPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> save = mapper.save(user);</span><br><span class="line">    System.out.println(save);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 发送的sql语句</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] ==&gt;  Preparing: insert into user(name, pwd) values(?, ?) </span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] ==&gt; Parameters: SAVE ID(String), 123(String)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] &lt;==    Updates: 1</span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 主键回填到了对象中</span></span></span><br><span class="line">User(id=4, name=SAVE ID, pwd=123)</span><br></pre></td></tr></table></figure><h3 id="获取Oracle序列的值"><a href="#获取Oracle序列的值" class="headerlink" title="获取Oracle序列的值"></a>获取Oracle序列的值</h3><p>这里就不具体演示了，看不懂就算了，反正用的也不多。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">selectKey: 配置查询主键的sql语句</span></span><br><span class="line"><span class="comment">            keyProperty:查出的主键值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">            order: </span></span><br><span class="line"><span class="comment">                BEFORE:当前sql在插入sql之前运行</span></span><br><span class="line"><span class="comment">                AFTER:当前sql在插入sql之后运行</span></span><br><span class="line"><span class="comment">            resultType:查出的数据的返回值类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            BEFORE运行顺序:</span></span><br><span class="line"><span class="comment">                先运行selectKey查询id的sql;查出id值封装给javaBean的id属性</span></span><br><span class="line"><span class="comment">                再运行插入的sql;就可以取出id属性对应的值</span></span><br><span class="line"><span class="comment">            AFTER运行顺序:</span></span><br><span class="line"><span class="comment">                先运行插入的sql（从序列中取出新值作为id）;</span></span><br><span class="line"><span class="comment">                再运行selectKey查询id的sql, 回填到javaBean的id属性中</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span></span><br><span class="line">select EMPLOYEES_SEQ.nextval from dual </span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插入时的主键是从序列中拿到的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- BEFORE:--&gt;</span></span><br><span class="line">insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) </span><br><span class="line">values(#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email&#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h2><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><p>#{arg}: 直接取出参数值；只有一个参数时可以随便写</p><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个参数</span></span><br><span class="line"><span class="function">User <span class="title">getOneParam</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOneParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;user_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneParam</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User oneParam = mapper.getOneParam(<span class="number">1</span>);</span><br><span class="line">    System.out.println(oneParam);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOneParam]-[DEBUG] ==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOneParam]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOneParam]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">User(id=1, name=谢禹宏, pwd=123456)</span><br></pre></td></tr></table></figure><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><p>MyBatis会做特殊处理，<strong>多个参数会被封装成一个</strong> <code>**map**</code></p><p>​    <strong>key：</strong><code>param1...paramN</code> <strong>or</strong> <code>arg0...argN-1</code></p><p>​    <strong>value：</strong>传入的参数</p><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个参数</span></span><br><span class="line"><span class="function">User <span class="title">getParams</span><span class="params">(String name, String pwd)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getParams&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        参数name可以使用 #&#123;arg0&#125; 或 #&#123;param1&#125; 取出</span></span><br><span class="line"><span class="comment">        参数pwd可以使用 #&#123;arg1&#125; 或 #&#123;param2&#125; 取出</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    select * from user where name = #&#123;arg0&#125; and pwd = #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParams</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = mapper.getParams(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getParams]-[DEBUG] ==&gt;  Preparing: select * from user where name = ? and pwd = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getParams]-[DEBUG] ==&gt; Parameters: Tom(String), 123456(String)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.getParams]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">User(id=2, name=Tom, pwd=123456)</span><br></pre></td></tr></table></figure><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><p>使用注解 <code>@Param</code> 指定参数的 <code>key</code></p><p>多个参数会被封装成一个map</p><p>​        <strong>key：</strong>使用 <code>@param</code> 注解给参数多加一个 <code>key</code>，原来的 <code>arg</code> 和 <code>param</code> 依旧能使用</p><p>​        <strong>value：</strong>参数值</p><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名参数</span></span><br><span class="line"><span class="function">User <span class="title">getAnnoParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                  String pwd)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAnnoParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;name&#125; and pwd = #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnoParam</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = mapper.getAnnoParam(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getAnnoParam]-[DEBUG] ==&gt;  Preparing: select * from user where name = ? and pwd = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getAnnoParam]-[DEBUG] ==&gt; Parameters: Tom(String), 123456(String)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.getAnnoParam]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">User(id=2, name=Tom, pwd=123456)</span><br></pre></td></tr></table></figure><h3 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h3><p>​    <strong>多个参数正好是业务逻辑的数据模型(实体类),直接传入pojo(对象)</strong></p><p>​    #{属性名}: 取出传入的pojo对应属性的值</p><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pojo</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updatePojo</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePojo&quot;</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdatePojo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = mapper.getOneParam(<span class="number">1</span>);</span><br><span class="line">    user.setPwd(<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.updatePojo(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOneParam]-[DEBUG] ==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOneParam]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOneParam]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[main] [org.hong.mapper.UserMapper.updatePojo]-[DEBUG] ==&gt;  Preparing: update user set name = ?, pwd = ? where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.updatePojo]-[DEBUG] ==&gt; Parameters: 谢禹宏(String), 654321(String), 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.updatePojo]-[DEBUG] &lt;==    Updates: 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><strong>如果多个参数不是业务模型中的数据模型, 没有对应的pojo, 可以传入map</strong></p><p>​    #{key}: 取出map中key对应的值</p><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="function">User <span class="title">getMapParam</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMapParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;name&#125; and pwd = #&#123;pwd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    User mapParam = mapper.getMapParam(map);</span><br><span class="line">    System.out.println(mapParam);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapParam]-[DEBUG] ==&gt;  Preparing: select * from user where name = ? and pwd = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapParam]-[DEBUG] ==&gt; Parameters: Tom(String), 123456(String)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapParam]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">User(id=2, name=Tom, pwd=123456)</span><br></pre></td></tr></table></figure><h3 id="TO"><a href="#TO" class="headerlink" title="TO"></a>TO</h3><p>​    <strong>多个参数不是业务模型中的数据, 但经常要使用, 推荐编写TO(Transfer Object)数据传输对象, 就是再专门写个类</strong></p><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{} 和 ${} 的区别"></a>#{} 和 ${} 的区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;&#125;是占位符，$&#123;&#125;是拼接符。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#&#123;&#125;是预编译处理，$&#123;&#125;是字符串替换。</span><br><span class="line">Mybatis 在处理#&#123;&#125;时，会将 sql 中的#&#123;&#125;替换为?号，调用 PreparedStatement 的set 方法来赋值。</span><br><span class="line">Mybatis 在处理$ &#123;&#125;时，就是把$&#123;&#125;替换成变量的值。</span><br><span class="line">使用#&#123;&#125;可以有效的防止 SQL 注入，提高系统安全性。</span><br></pre></td></tr></table></figure><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #&#123;&#125;和$&#123;&#125;的区别</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getOrderBy</span><span class="params">(String order)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #&#123;&#125;和$&#123;&#125;的区别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOrderBy&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user order by id $&#123;order&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test$()&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    List&lt;User&gt; desc = mapper.getOrderBy(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">    desc.forEach(System.out :: println);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 使用$&#123;&#125;方式取值不会被预编译, 而是将$&#123;xxx&#125;替换成对应的值, 再发送sql, 通常用来动态拼接sql, 比如排序</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOrderBy]-[DEBUG] ==&gt;  Preparing: select * from user order by id desc </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOrderBy]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getOrderBy]-[DEBUG] &lt;==      Total: 5</span><br><span class="line">User(id=5, name=SAVE ID, pwd=123)</span><br><span class="line">User(id=4, name=SAVE ID, pwd=123)</span><br><span class="line">User(id=3, name=Jerry, pwd=123456)</span><br><span class="line">User(id=2, name=Tom, pwd=123456)</span><br><span class="line">User(id=1, name=谢禹宏, pwd=987654)</span><br></pre></td></tr></table></figure><h3 id="最终版-1"><a href="#最终版-1" class="headerlink" title="最终版"></a>最终版</h3><h4 id="Mapper-接口-2"><a href="#Mapper-接口-2" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 单个参数</span></span><br><span class="line">    <span class="function">User <span class="title">getOneParam</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个参数</span></span><br><span class="line">    <span class="function">User <span class="title">getParams</span><span class="params">(String name, String pwd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命名参数</span></span><br><span class="line">    <span class="function">User <span class="title">getAnnoParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                      String pwd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pojo</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updatePojo</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="function">User <span class="title">getMapParam</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #&#123;&#125;和$&#123;&#125;的区别</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getOrderBy</span><span class="params">(String order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-xml-文件-1"><a href="#Mapper-xml-文件-1" class="headerlink" title="Mapper.xml 文件"></a>Mapper.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单个参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOneParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 多个参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getParams&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            参数name可以使用 #&#123;0&#125; 或 #&#123;param1&#125; 取出</span></span><br><span class="line"><span class="comment">            参数pwd可以使用 #&#123;1&#125; 或 #&#123;param2&#125; 取出</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        select * from user where name = #&#123;arg0&#125; and pwd = #&#123;param2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 命名参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAnnoParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where name = #&#123;name&#125; and pwd = #&#123;param2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- pojo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePojo&quot;</span>&gt;</span></span><br><span class="line">        update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- map --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMapParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where name = #&#123;name&#125; and pwd = #&#123;pwd&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- #&#123;&#125;和$&#123;&#125;的区别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOrderBy&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user order by id $&#123;order&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-2"><a href="#测试用例-2" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneParam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User oneParam = mapper.getOneParam(<span class="number">1</span>);</span><br><span class="line">        System.out.println(oneParam);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParams</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User oneParam = mapper.getParams(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(oneParam);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnoParam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = mapper.getAnnoParam(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdatePojo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = mapper.getOneParam(<span class="number">1</span>);</span><br><span class="line">        user.setPwd(<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = mapper.updatePojo(user);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        User mapParam = mapper.getMapParam(map);</span><br><span class="line">        System.out.println(mapParam);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test$()&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        List&lt;User&gt; desc = mapper.getOrderBy(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">        desc.forEach(System.out :: println);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getEmp</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span>Integer id, Strig name)</span></span>;</span><br><span class="line"><span class="comment">// 取值: id--&gt;#&#123;id|param1&#125;name--&gt;#&#123;param2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getEmp</span><span class="params">(Integer id, <span class="meta">@Param(&quot;e&quot;)</span>Emp emp)</span></span>;</span><br><span class="line"><span class="comment">// 取值: id--&gt;#&#123;param1&#125; name--&gt;#&#123;param2.name|e.name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getEmpById</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">##特别注意: </span></span><br><span class="line"><span class="comment">如果是Collection(List, Set) or Array, 也会特殊处理, 把传入的list或数组封装在map中。</span></span><br><span class="line"><span class="comment">Key: Collection(collection) | List(list) | Array(array) | Set(set)</span></span><br><span class="line"><span class="comment">取值: 取出第一个id的值: #&#123;list[0]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="返回List和Map"><a href="#返回List和Map" class="headerlink" title="返回List和Map"></a>返回List和Map</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回List集合</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultType: 如果返回的是一个集合, 要写集合中元素的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    List&lt;User&gt; list = mapper.getList();</span><br><span class="line">    list.forEach(System.out :: println);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getList]-[DEBUG] ==&gt;  Preparing: select * from user </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getList]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getList]-[DEBUG] &lt;==      Total: 4</span><br><span class="line">User(id=1, name=谢禹宏, pwd=654321)</span><br><span class="line">User(id=2, name=Tom, pwd=123456)</span><br><span class="line">User(id=3, name=Jerry, pwd=123456)</span><br><span class="line">User(id=4, name=SAVE ID, pwd=123)</span><br></pre></td></tr></table></figure><h3 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h3><h4 id="key-gt-列名-value-gt-列值"><a href="#key-gt-列名-value-gt-列值" class="headerlink" title="key -&gt; 列名        value -&gt; 列值"></a>key -&gt; 列名        value -&gt; 列值</h4><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回Map集合, key -&gt; 列名、value -&gt; 列值</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getMapColumnToValue</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultType: key-&gt;列名、value-&gt;列值, 写Map的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMapColumnToValue&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapColumnToValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    Map&lt;String, Object&gt; mapColumnToValue = mapper.getMapColumnToValue(<span class="number">1</span>);</span><br><span class="line">    mapColumnToValue.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot;-&gt;&quot;</span> + value));</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapColumnToValue]-[DEBUG] ==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapColumnToValue]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapColumnToValue]-[DEBUG] &lt;==      Total: 1</span><br><span class="line"><span class="meta">name-&gt;</span><span class="bash">谢禹宏</span></span><br><span class="line"><span class="meta">id-&gt;</span><span class="bash">1</span></span><br><span class="line"><span class="meta">pwd-&gt;</span><span class="bash">654321</span></span><br></pre></td></tr></table></figure><h4 id="key-gt-主键-value-gt-实体对象"><a href="#key-gt-主键-value-gt-实体对象" class="headerlink" title="key -&gt; 主键        value -&gt; 实体对象"></a>key -&gt; 主键        value -&gt; 实体对象</h4><p><strong>接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回Map集合, key -&gt; 主键值、value -&gt; 对应的实体对象</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line"><span class="function">Map&lt;Integer, User&gt; <span class="title">getMapPrimayToEntity</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultType: key-&gt;主键、value-&gt;实体对象, 写实体对象的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMapPrimayToEntity&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapPrimayToEntity</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    Map&lt;Integer, User&gt; mapPrimayToEntity = mapper.getMapPrimayToEntity();</span><br><span class="line">    mapPrimayToEntity.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot;-&gt;&quot;</span> + value));</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment"># 正常运行</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapPrimayToEntity]-[DEBUG] ==&gt;  Preparing: select * from user </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapPrimayToEntity]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getMapPrimayToEntity]-[DEBUG] &lt;==      Total: 4</span><br><span class="line"><span class="meta">1-&gt;</span><span class="bash">User(id=1, name=谢禹宏, <span class="built_in">pwd</span>=654321)</span></span><br><span class="line"><span class="meta">2-&gt;</span><span class="bash">User(id=2, name=Tom, <span class="built_in">pwd</span>=123456)</span></span><br><span class="line"><span class="meta">3-&gt;</span><span class="bash">User(id=3, name=Jerry, <span class="built_in">pwd</span>=123456)</span></span><br><span class="line"><span class="meta">4-&gt;</span><span class="bash">User(id=4, name=SAVE ID, <span class="built_in">pwd</span>=123)</span></span><br></pre></td></tr></table></figure><h3 id="最终版-2"><a href="#最终版-2" class="headerlink" title="最终版"></a>最终版</h3><h4 id="Mapper-接口-3"><a href="#Mapper-接口-3" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.MapKey;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回List集合</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Map集合, key -&gt; 列名、value -&gt; 列值</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getMapColumnToValue</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Map集合, key -&gt; 主键值、value -&gt; 对应的实体对象</span></span><br><span class="line">    <span class="meta">@MapKey(&quot;id&quot;)</span> <span class="comment">// 告诉MyBatis封装Map的时候使用实体类的哪个属性作为map的key</span></span><br><span class="line">    <span class="function">Map&lt;Integer, User&gt; <span class="title">getMapPrimayToEntity</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-xml-文件-2"><a href="#Mapper-xml-文件-2" class="headerlink" title="Mapper.xml 文件"></a>Mapper.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- resultType: 如果返回的是一个集合, 要写集合中元素的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- resultType: key-&gt;列名、value-&gt;列值, 写Map的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMapColumnToValue&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- resultType: key-&gt;主键、value-&gt;实体对象, 写实体对象的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMapPrimayToEntity&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-3"><a href="#测试用例-3" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultTypeTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        List&lt;User&gt; list = mapper.getList();</span><br><span class="line">        list.forEach(System.out :: println);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapColumnToValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        Map&lt;String, Object&gt; mapColumnToValue = mapper.getMapColumnToValue(<span class="number">1</span>);</span><br><span class="line">        mapColumnToValue.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot;-&gt;&quot;</span> + value));</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapPrimayToEntity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        Map&lt;Integer, User&gt; mapPrimayToEntity = mapper.getMapPrimayToEntity();</span><br><span class="line">        mapPrimayToEntity.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot;-&gt;&quot;</span> + value));</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><h3 id="核心配置文件-（mybatis-config-xml）"><a href="#核心配置文件-（mybatis-config-xml）" class="headerlink" title="核心配置文件 （mybatis-config.xml）"></a>核心配置文件 （mybatis-config.xml）</h3><p>MyBatis的配置文件包含了影响MyBatis行为的设置和属性信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure><h3 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用配置多套运行环境</p><p>MyBatis 默认的事务管理器就是JDBC，连接池：POOLED</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- default: 表示使用哪种环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySql环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Oracle环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;oracle环境&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Driver: com.ibm.db2.jdbc.app.DB2Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:db2://localhost:5000/orcl&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;scott&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ccat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。（db.properties）</p><p><strong>编写一个 properties 配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p><strong>在核心配置文件中引入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">引入外部配置文件</span></span><br><span class="line"><span class="comment">首先读取在 properties 元素体内指定的属性。</span></span><br><span class="line"><span class="comment">然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h3><ul><li> 类型别名可为 Java 类型设置一个缩写名字。存在的意义仅在于用来<strong>降低冗余的全限定类名书写</strong> </li><li> <strong>MyBatis中的别名是不区分大小写的</strong>  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以给实体类起别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean<br>每一个在包 <code>org.hong.pojo</code> 中的 Java Bean，在<strong>没有注解</strong>的情况下，会使用 <strong>Bean 的首字母小写的非限定类名来作为它的别名</strong>，比如 <code>org.hong.pojo.User</code> 的别名为 <code>user</code>  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.hong.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li> 若有注解，则别名为其注解值。通常用来解决不同包中相同类名的别名冲突  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，</p><p>注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td><strong>_int</strong></td><td><strong>int</strong></td></tr><tr><td><strong>_integer</strong></td><td><strong>int</strong></td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td><strong>int</strong></td><td><strong>Integer</strong></td></tr><tr><td><strong>integer</strong></td><td><strong>Integer</strong></td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table><h3 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h3><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td>true | false</td><td>false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true | false</td><td>false</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启驼峰命名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h3><p><strong>方式一</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/hong/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式二</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.hong.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式三</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.hong.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二&amp;方式三的<strong>注意点</strong>：</p><ul><li>接口和对应的Mapper配置文件<strong>必须同名</strong></li><li>接口和对应的Mapper配置文件<strong>编译后必须在同一个文件夹下</strong> </li></ul><ol><li><ol><li>可以把接口和对应的Mapper<strong>创建在同一个包下</strong></li><li>可以在<strong>resources文件加中创建和接口相同层数并且名称相同的包，然后创建接口对应的Mapper</strong></li></ol></li></ol><h3 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h3><p>生命周期和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong></p><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（<strong>局部变量</strong>）。</li></ul><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><ul><li><p>可以想象为数据库连接池</p></li><li><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong></p></li><li><p>因此 SqlSessionFactory 的最佳作用域是应用作用域（<strong>Application</strong>）。</p></li><li><p>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</p></li></ul><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><ul><li><p>想象为连接到连接池的一个请求</p></li><li><p>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</p></li><li><p>用完之后需要马上关闭，否则会导致资源被占用</p></li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><p>如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手！！！</p><p>曾经：sout，Debug</p><p>现在：日志工厂！</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><ul><li><p>SLF4J</p></li><li><p><strong>LOG4J  【掌握】</strong></p></li><li><p>LOG4J2</p></li><li><p>JDK_LOGGING</p></li><li><p>COMMONS_LOGGING</p></li><li><p><strong>STDOUT_LOGGING  【掌握】</strong></p></li><li><p>NO_LOGGING</p></li></ul><p>在MyBatis中具体使用那个日志实现，在设置中设定！</p><h3 id="STDOUT-LOGGING（标准日志输出）"><a href="#STDOUT-LOGGING（标准日志输出）" class="headerlink" title="STDOUT_LOGGING（标准日志输出）"></a>STDOUT_LOGGING（标准日志输出）</h3><p>在mybatis核心配置文件中，配置我们的日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志的重点部分 --&gt;</span></span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1205555397.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@47db50c5]</span><br><span class="line">==&gt;  Preparing: select * from User </span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, 张三, 123456</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">User&#123;id=1, name=&#x27;张三&#x27;, password=&#x27;123456&#x27;&#125;</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@47db50c5]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@47db50c5]</span><br><span class="line">Returned connection 1205555397 to pool.</span><br></pre></td></tr></table></figure><h3 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h3><p>什么是log4j？</p><ul><li><p>Log4j是Apache的一个<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=269184&ss_c=ssc.citiao.link">开放源代码</a>项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</p></li><li><p>我们也可以控制每一条日志的输出格式。</p></li><li><p>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</p></li><li><p>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p></li></ul><ol><li> 先导入log4j的jar包  </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li> log4j.properties  </li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/hong.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><ol><li> 配置log4j为日志的实现  </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li> Log4j的使用！，直接运行测试查询 </li></ol><p><strong>简单使用</strong></p><ol><li> 在要使用Log4j的类中，导入包 import org.apache.log4j.Logger; </li><li> 日志对象，参数为当前类的class  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure><ol><li> 日志级别  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p><strong>简单的sql语句使用注解，复杂的sql语句和结果集映射使用xml配置文件</strong></p><h3 id="save-1"><a href="#save-1" class="headerlink" title="save"></a>save</h3><h4 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user(name, pwd) values(#&#123;name&#125;, #&#123;pwd&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="测试用例-4"><a href="#测试用例-4" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;SAVE ID&quot;</span>);</span><br><span class="line">    user.setPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> save = mapper.save(user);</span><br><span class="line">    System.out.println(save);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-1"><a href="#控制台打印-1" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] ==&gt;  Preparing: insert into user(name, pwd) values(?, ?) </span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] ==&gt; Parameters: SAVE ID(String), 123(String)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.save]-[DEBUG] &lt;==    Updates: 1</span><br><span class="line">1</span><br><span class="line">User(id=null, name=SAVE ID, pwd=123)</span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><h4 id="接口方法-1"><a href="#接口方法-1" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="测试用例-5"><a href="#测试用例-5" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-2"><a href="#控制台打印-2" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">User(id=1, name=谢禹宏, pwd=654321)</span><br></pre></td></tr></table></figure><h3 id="update-1"><a href="#update-1" class="headerlink" title="update"></a>update</h3><h4 id="接口方法-2"><a href="#接口方法-2" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="测试用例-6"><a href="#测试用例-6" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">    user.setPwd(<span class="string">&quot;987654&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> update = mapper.update(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-3"><a href="#控制台打印-3" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt;  Preparing: select * from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.get]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[main] [org.hong.mapper.UserMapper.update]-[DEBUG] ==&gt;  Preparing: update user set name = ?, pwd = ? where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.update]-[DEBUG] ==&gt; Parameters: 谢禹宏(String), 987654(String), 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.update]-[DEBUG] &lt;==    Updates: 1</span><br><span class="line">User(id=1, name=谢禹宏, pwd=987654)</span><br></pre></td></tr></table></figure><h3 id="delete-1"><a href="#delete-1" class="headerlink" title="delete"></a>delete</h3><h4 id="接口方法-3"><a href="#接口方法-3" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="测试用例-7"><a href="#测试用例-7" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">    <span class="keyword">int</span> delete = mapper.delete(<span class="number">10</span>);</span><br><span class="line">    System.out.println(delete);</span><br><span class="line">    <span class="comment">// 4.提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-4"><a href="#控制台打印-4" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.UserMapper.delete]-[DEBUG] ==&gt;  Preparing: delete from user where id = ? </span><br><span class="line">[main] [org.hong.mapper.UserMapper.delete]-[DEBUG] ==&gt; Parameters: 10(Integer)</span><br><span class="line">[main] [org.hong.mapper.UserMapper.delete]-[DEBUG] &lt;==    Updates:</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="最终版-3"><a href="#最终版-3" class="headerlink" title="最终版"></a>最终版</h3><h4 id="Mapper-接口-4"><a href="#Mapper-接口-4" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(name, pwd) values(#&#123;name&#125;, #&#123;pwd&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例-8"><a href="#测试用例-8" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;SAVE ID&quot;</span>);</span><br><span class="line">        user.setPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> save = mapper.save(user);</span><br><span class="line">        System.out.println(save);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        User user = mapper.get(<span class="number">1</span>);</span><br><span class="line">        user.setPwd(<span class="string">&quot;987654&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> update = mapper.update(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">// 2.获取需要的mapper接口的代理对象</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 3.调用对应的方法执行操作</span></span><br><span class="line">        <span class="keyword">int</span> delete = mapper.delete(<span class="number">10</span>);</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">        <span class="comment">// 4.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 5.关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resultMap（结果集映射）"><a href="#resultMap（结果集映射）" class="headerlink" title="resultMap（结果集映射）"></a>resultMap（结果集映射）</h2><h3 id="自定义-Java-Bean-封装规则"><a href="#自定义-Java-Bean-封装规则" class="headerlink" title="自定义 Java Bean 封装规则"></a>自定义 <code>Java Bean</code> 封装规则</h3><h4 id="修改-User-实体类"><a href="#修改-User-实体类" class="headerlink" title="修改 User 实体类"></a>修改 User 实体类</h4><p>别问为什么要闲得蛋疼的修改，现在要演示<strong>实体类属性和数据库列名不一致如何映射</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer user_id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-接口-5"><a href="#Mapper-接口-5" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-xml-文件-3"><a href="#Mapper-xml-文件-3" class="headerlink" title="Mapper.xml 文件"></a>Mapper.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultMap: 自定义结果集映射规则</span></span><br><span class="line"><span class="comment">            id: 唯一标识, 方便被引用</span></span><br><span class="line"><span class="comment">            type: 映射到的实体类的全类名</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            id: 映射实体类中与主键对应的属性</span></span><br><span class="line"><span class="comment">                column: 主键列的列名</span></span><br><span class="line"><span class="comment">                property: 主键列对应的属性</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- result: 映射普通属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        如果javaBen属性名和列名不一致, 不应该再使用resultType配置返回值类型</span></span><br><span class="line"><span class="comment">        而是使用resultMap引用自定义的结果集映射规则</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-9"><a href="#测试用例-9" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultMapTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tesResultMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = mapper.getAll();</span><br><span class="line">        list.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-5"><a href="#控制台打印-5" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 虽然数据表的列名与实体类的属性名不一致, 但是我们配置了resultMap, 正常执行, 帅, 不愧是我</span></span></span><br><span class="line">[main] [org.hong.mapper.UserMapper.getAll]-[DEBUG] ==&gt;  Preparing: select * from user </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getAll]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.UserMapper.getAll]-[DEBUG] &lt;==      Total: 5</span><br><span class="line">User(user_id=1, username=谢禹宏, password=987654)</span><br><span class="line">User(user_id=2, username=Tom, password=123456)</span><br><span class="line">User(user_id=3, username=Jerry, password=123456)</span><br><span class="line">User(user_id=4, username=SAVE ID, password=123)</span><br><span class="line">User(user_id=5, username=SAVE ID, password=123)</span><br></pre></td></tr></table></figure><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>接下来演示一个部门对应多个员工，一个员工对应一个部门的关系映射。</p><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `dept` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;开发部&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;测试部&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `did` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fkdid` (`did`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fkdid` <span class="keyword">FOREIGN</span> KEY (`did`) <span class="keyword">REFERENCES</span> `dept` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`id`, `name`, `did`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`id`, `name`, `did`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;2&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`id`, `name`, `did`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`id`, `name`, `did`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;2&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`id`, `name`, `did`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 多对一, 查询N方的同时获取到1方</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyBatisUtil-工具类-1"><a href="#MyBatisUtil-工具类-1" class="headerlink" title="MyBatisUtil 工具类"></a>MyBatisUtil 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// openSession(): 此方式打开SQL会话, 事务是开启状态</span></span><br><span class="line">        <span class="comment">// openSession(true): 此方式打开SQL会话, 事务是关闭状态</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jdbc-properties-1"><a href="#jdbc-properties-1" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h4 id="log4j-properties-1"><a href="#log4j-properties-1" class="headerlink" title="log4j.properties"></a>log4j.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h4 id="MyBatis-核心配置文件-1"><a href="#MyBatis-核心配置文件-1" class="headerlink" title="MyBatis 核心配置文件"></a>MyBatis 核心配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- configuration: 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部配置文件, 放在最前面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置日志输出, 方便观察sql语句和参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments配置项目的运行环境, 可以配置多个</span></span><br><span class="line"><span class="comment">        default: 启用的环境</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册!!! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.hong.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><h4 id="实体类-2"><a href="#实体类-2" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 多对一, 查询N方的同时获取到1方</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><h5 id="DeptMapper-java"><a href="#DeptMapper-java" class="headerlink" title="DeptMapper.java"></a>DeptMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-java"><a href="#EmployeeMapper-java" class="headerlink" title="EmployeeMapper.java"></a>EmployeeMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DeptMapper-xml"><a href="#DeptMapper-xml" class="headerlink" title="DeptMapper.xml"></a>DeptMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptBase&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-xml"><a href="#EmployeeMapper-xml" class="headerlink" title="EmployeeMapper.xml"></a>EmployeeMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建一个只封装普通属性的resultMap映射规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employeeBase&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用extends属性继承一个resultMap可以获得指定的resultMap定义过的映射规则, 就可以省略普通属性, 只写级联属性的规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;employeeBase&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 方式一: 联合查询, 级联属性封装结果 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 两张表都有name字段, 在进行封装的时候就会出现问题, 要么查询的时候取别名, 要么在建表的时候就避免 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;employeeBase&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            方式二: 给指定联合的javaBean对象编写映射规则</span></span><br><span class="line"><span class="comment">                association:定义关联对象的封装规则</span></span><br><span class="line"><span class="comment">                    property: 指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment">                    javaType: 指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;employeeBase&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 方式三: 使用association节点的resultMap属性指定级联对象的映射规则, 而不是再写一份 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;org.hong.mapper.DeptMapper.deptBase&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询Employee的同时查询出对应Dept, 此时使用resultType就做不到了, 需要使用resultMap引用自自定义的映射规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内连接 --&gt;</span></span><br><span class="line">        select e.*, d.id did, d.name dname from employee e inner join dept d on e.did = d.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h4><h5 id="DeptMapper-java-1"><a href="#DeptMapper-java-1" class="headerlink" title="DeptMapper.java"></a>DeptMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Dept <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-java-1"><a href="#EmployeeMapper-java-1" class="headerlink" title="EmployeeMapper.java"></a>EmployeeMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DeptMapper-xml-1"><a href="#DeptMapper-xml-1" class="headerlink" title="DeptMapper.xml"></a>DeptMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from dept where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-xml-1"><a href="#EmployeeMapper-xml-1" class="headerlink" title="EmployeeMapper.xml"></a>EmployeeMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        思路:</span></span><br><span class="line"><span class="comment">            1.查询所有员工的信息</span></span><br><span class="line"><span class="comment">            2.根据查询出来的员工的did查询对应的部门</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            association:定义关联对象的封装规则</span></span><br><span class="line"><span class="comment">             select: 表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment">             column: 指定将那一列的值传给select</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">javaType</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">select</span>=<span class="string">&quot;org.hong.mapper.DeptMapper.get&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询Employee的同时查询出对应Dept, 此时使用resultType就做不到了, 需要使用resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">        select * from employee</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-10"><a href="#测试用例-10" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManyToOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; list = mapper.getAll();</span><br><span class="line">        list.forEach(e -&gt; System.out.println(e.getName()));</span><br><span class="line">        list.forEach(e -&gt; System.out.println(e.getDept().getName()));</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-6"><a href="#控制台打印-6" class="headerlink" title="控制台打印"></a>控制台打印</h4><h5 id="联合查询-1"><a href="#联合查询-1" class="headerlink" title="联合查询"></a>联合查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 联合查询的控制台打印, 只发送一条sql</span></span></span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] ==&gt;  Preparing: select e.*, d.id did, d.name dname from employee e inner join dept d on e.did = d.id </span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] &lt;==      Total: 5</span><br><span class="line">小明</span><br><span class="line">小张</span><br><span class="line">小王</span><br><span class="line">小红</span><br><span class="line">小李</span><br><span class="line">开发部</span><br><span class="line">开发部</span><br><span class="line">开发部</span><br><span class="line">测试部</span><br><span class="line">测试部</span><br></pre></td></tr></table></figure><h5 id="嵌套查询-1"><a href="#嵌套查询-1" class="headerlink" title="嵌套查询"></a>嵌套查询</h5><p>可以发现，似乎并没有懒加载，直接一次把所有 sql 发出去了，这是因为我们还没有开启 MyBatis 的懒加载功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 先发送查询Employee表的ssql</span></span></span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] ==&gt;  Preparing: select * from employee </span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] ==&gt; Parameters: </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 再发送查询Dept表的sql</span></span></span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ====&gt;  Preparing: select * from dept where id = ? </span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ====&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] &lt;====      Total: 1</span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ====&gt;  Preparing: select * from dept where id = ? </span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ====&gt; Parameters: 2(Integer)</span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] &lt;====      Total: 1</span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] &lt;==      Total: 5</span><br><span class="line">小明</span><br><span class="line">小红</span><br><span class="line">小张</span><br><span class="line">小李</span><br><span class="line">小王</span><br><span class="line">开发部</span><br><span class="line">测试部</span><br><span class="line">开发部</span><br><span class="line">测试部</span><br><span class="line">开发部</span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><h4 id="实体类-3"><a href="#实体类-3" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employees;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="联合查询-2"><a href="#联合查询-2" class="headerlink" title="联合查询"></a>联合查询</h4><h5 id="DeptMapper-java-2"><a href="#DeptMapper-java-2" class="headerlink" title="DeptMapper.java"></a>DeptMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Dept <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-java-2"><a href="#EmployeeMapper-java-2" class="headerlink" title="EmployeeMapper.java"></a>EmployeeMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DeptMapper-xml-2"><a href="#DeptMapper-xml-2" class="headerlink" title="DeptMapper.xml"></a>DeptMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptBase&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;deptBase&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employees&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;deptBase&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 方式二 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employees&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ofType</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">resultMap</span>=<span class="string">&quot;org.hong.mapper.EmployeeMapper.employeeBase&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;dept2&quot;</span>&gt;</span></span><br><span class="line">        select d.*, e.id eid, e.name ename from dept d inner join employee e on d.id = e.did where d.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-xml-2"><a href="#EmployeeMapper-xml-2" class="headerlink" title="EmployeeMapper.xml"></a>EmployeeMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employeeBase&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="嵌套查询-2"><a href="#嵌套查询-2" class="headerlink" title="嵌套查询"></a>嵌套查询</h4><h5 id="DeptMapper-java-3"><a href="#DeptMapper-java-3" class="headerlink" title="DeptMapper.java"></a>DeptMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Dept <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-java-3"><a href="#EmployeeMapper-java-3" class="headerlink" title="EmployeeMapper.java"></a>EmployeeMapper.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getByDid</span><span class="params">(<span class="keyword">int</span> did)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DeptMapper-xml-3"><a href="#DeptMapper-xml-3" class="headerlink" title="DeptMapper.xml"></a>DeptMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptBase&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;deptBase&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">collection: 定义关联集合类型的属性的封装规则</span></span><br><span class="line"><span class="comment">                ofType: 指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">                select: 表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment">                column: 指定将那一列的值传给select</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employees&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;org.hong.mapper.EmployeeMapper.getByDid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;dept1&quot;</span>&gt;</span></span><br><span class="line">        select * from dept where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="EmployeeMapper-xml-3"><a href="#EmployeeMapper-xml-3" class="headerlink" title="EmployeeMapper.xml"></a>EmployeeMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from employee where did = #&#123;did&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-11"><a href="#测试用例-11" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.DeptMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToMany</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        DeptMapper mapper = sqlSession.getMapper(DeptMapper.class);</span><br><span class="line"></span><br><span class="line">        Dept dept = mapper.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(dept);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-7"><a href="#控制台打印-7" class="headerlink" title="控制台打印"></a>控制台打印</h4><h5 id="联合查询-3"><a href="#联合查询-3" class="headerlink" title="联合查询"></a>联合查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ==&gt;  Preparing: select d.*, e.id eid, e.name ename from dept d inner join employee e on d.id = e.did where d.id = ? </span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] &lt;==      Total: 3</span><br><span class="line">Dept(id=1, name=开发部, employees=[Employee(id=1, name=小明), Employee(id=3, name=小张), Employee(id=5, name=小王)])</span><br></pre></td></tr></table></figure><h5 id="嵌套查询-3"><a href="#嵌套查询-3" class="headerlink" title="嵌套查询"></a>嵌套查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ==&gt;  Preparing: select * from dept where id = ? </span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.DeptMapper.get]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getByDid]-[DEBUG] ==&gt;  Preparing: select * from employee where did = ? </span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getByDid]-[DEBUG] ==&gt; Parameters: 1(Integer)</span><br><span class="line">[main] [org.hong.mapper.EmployeeMapper.getByDid]-[DEBUG] &lt;==      Total: 3</span><br><span class="line">Dept(id=1, name=开发部, employees=[Employee(id=1, name=小明), Employee(id=3, name=小张), Employee(id=5, name=小王)])</span><br></pre></td></tr></table></figure><h3 id="嵌套查询的懒加载"><a href="#嵌套查询的懒加载" class="headerlink" title="嵌套查询的懒加载"></a>嵌套查询的懒加载</h3><h4 id="全局懒加载"><a href="#全局懒加载" class="headerlink" title="全局懒加载"></a>全局懒加载</h4><p>修改 MyBatis 的核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        aggressiveLazyLoading:</span></span><br><span class="line"><span class="comment">            启用时: 有延迟加载属性的对象在被调用时将会完全加载任意属性。</span></span><br><span class="line"><span class="comment">            禁用时: 调用哪个懒载属性就加载哪个属性, 按需加载</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        lazyLoadingEnabled:</span></span><br><span class="line"><span class="comment">            全局启用或禁用延迟加载。</span></span><br><span class="line"><span class="comment">禁用时: 所有关联对象都会即时加载。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部懒加载"><a href="#局部懒加载" class="headerlink" title="局部懒加载"></a>局部懒加载</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        association:定义关联对象的封装规则</span></span><br><span class="line"><span class="comment">           select: 表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment">           column: 指定将那一列的值传给select</span></span><br><span class="line"><span class="comment">           fetchType: 关联属性的加载策略, 可以覆盖全局的lazyLoadingEnabled, fetchType属性同样可以作用于collection标签</span></span><br><span class="line"><span class="comment">               lazy: 延迟加载</span></span><br><span class="line"><span class="comment">               eager: 即时加载</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">javaType</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;org.hong.mapper.DeptMapper.get&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>嵌套查询</strong>的方式在查询时会向数据库发送<strong>多次</strong>SQL语句</li><li><strong>联合查询</strong>的方式只会向数据库发送<strong>一次</strong>SQL语句</li></ul><hr><ul><li><p><strong>resultMap</strong>：自定义某个javaBean的封装规则</p></li><li><p><strong>resultMap的属性</strong>： </p></li><li><ul><li>id：唯一标识</li><li>type：自定义规则的java类型</li></ul></li><li><p><strong>resultMap包含的标签</strong>： </p></li><li><ul><li>result：指定其余键的封装规则</li><li>id：指定主键的封装规则, id定义主键底层会有优化 </li></ul></li><li><ul><li><ul><li>column：指定数据库的列</li><li>property：指定对应的javaBean属性</li></ul></li></ul></li></ul><hr><ul><li><p> <strong>association</strong>：定义关联<strong>对象</strong>的封装规则 </p></li><li><p> <strong>collection</strong>：定义关联<strong>集合类型</strong>的属性的封装规则 </p></li><li><ul><li> <strong>property</strong>：当前封装的对象的属性 </li><li> <strong>javaType</strong>：指定<strong>实体类中属性的类型</strong> </li></ul></li><li><ul><li> <strong>ofType</strong>：指定映射到List或集合中的pojo类型，<strong>泛型中的约束类型</strong> </li><li> <strong>select</strong>：表明当前属性是调用select指定的方法查出的结果 </li></ul></li><li><ul><li> <strong>column</strong>： 指定将哪一列的值传给select </li></ul></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递多列的值</span></span><br><span class="line">column=<span class="string">&quot;&#123;key1=column1, key2=column2&#125;&quot;</span></span><br><span class="line">key: select指定的查询的#&#123;key&#125;中的key</span><br><span class="line">colnmn: 列名</span><br></pre></td></tr></table></figure><ul><li><ul><li><ul><li> 流程：使用select指定的方法(传入column指定的列的参数值)查出对象, 并封装给property </li></ul></li></ul></li><li><ul><li> <strong>fetchType</strong>：在全局配置中设置了延迟加载的情况下可以将联合属性修改为立即加载 </li></ul></li><li><ul><li><ul><li>lazy: 延迟, 默认</li><li>eager: 立即</li></ul></li></ul></li></ul><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p><strong>动态SQL就是根据不同的条件生成不同的SQL语句</strong></p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><h3 id="搭建环境-1"><a href="#搭建环境-1" class="headerlink" title="搭建环境"></a>搭建环境</h3><h4 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `blog`;</span><br><span class="line">CREATE TABLE `blog` (</span><br><span class="line">  `id` varchar(50) NOT NULL COMMENT &#x27;博客id&#x27;,</span><br><span class="line">  `title` varchar(100) NOT NULL COMMENT &#x27;博客标题&#x27;,</span><br><span class="line">  `author` varchar(30) NOT NULL COMMENT &#x27;博客作者&#x27;,</span><br><span class="line">  `create_time` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `views` int(30) NOT NULL COMMENT &#x27;浏览量&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0001&#x27;, &#x27;hong/My-Note&#x27;, &#x27;谢禹宏&#x27;, &#x27;2021-04-21 00:00:00&#x27;, &#x27;100&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0002&#x27;, &#x27;MyBatis-Plus&#x27;, &#x27;苞米豆&#x27;, &#x27;2021-04-21 00:00:00&#x27;, &#x27;100&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0003&#x27;, &#x27;Hello MyBatis&#x27;, &#x27;母鸡&#x27;, &#x27;2021-04-21 00:00:00&#x27;, &#x27;120&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0004&#x27;, &#x27;Hello Vuew&#x27;, &#x27;尤雨溪&#x27;, &#x27;2021-01-21 00:00:00&#x27;, &#x27;100&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0005&#x27;, &#x27;Hello Linux&#x27;, &#x27;林纳斯&#x27;, &#x27;2001-04-21 00:00:00&#x27;, &#x27;120&#x27;);</span><br></pre></td></tr></table></figure><h4 id="实体类-4"><a href="#实体类-4" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Integer views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyBatisUtil-工具类-2"><a href="#MyBatisUtil-工具类-2" class="headerlink" title="MyBatisUtil 工具类"></a>MyBatisUtil 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// openSession(): 此方式打开SQL会话, 事务是开启状态</span></span><br><span class="line">        <span class="comment">// openSession(true): 此方式打开SQL会话, 事务是关闭状态</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jdbc-properties-2"><a href="#jdbc-properties-2" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h4 id="log4j-properties-2"><a href="#log4j-properties-2" class="headerlink" title="log4j.properties"></a>log4j.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h4 id="MyBatis-核心配置文件-2"><a href="#MyBatis-核心配置文件-2" class="headerlink" title="MyBatis 核心配置文件"></a>MyBatis 核心配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- configuration: 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部配置文件, 放在最前面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置日志输出, 方便观察sql语句和参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰命名法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments配置项目的运行环境, 可以配置多个</span></span><br><span class="line"><span class="comment">        default: 启用的环境</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册!!! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.hong.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="BlogMapper-java"><a href="#BlogMapper-java" class="headerlink" title="BlogMapper.java"></a>BlogMapper.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BlogMapper-xml"><a href="#BlogMapper-xml" class="headerlink" title="BlogMapper.xml"></a>BlogMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h4 id="接口方法-4"><a href="#接口方法-4" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询博客, 携带了哪个字段查询条件就带上这个字段的值</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getByBlog</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="方法映射"><a href="#方法映射" class="headerlink" title="方法映射"></a>方法映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- if --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where</span><br><span class="line">    <span class="comment">&lt;!-- test: 判断的表达式 (OGNL)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and author like #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-12"><a href="#测试用例-12" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setTitle(<span class="string">&quot;%MyBatis%&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里赋值一个空字符串</span></span><br><span class="line">    blog.setAuthor(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; list = mapper.getByBlog(blog);</span><br><span class="line">    list.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-8"><a href="#控制台打印-8" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 发送的sql并没有带上author字段</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] ==&gt;  Preparing: select * from blog where title like ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] ==&gt; Parameters: %MyBatis%(String)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] &lt;==      Total: 2</span><br><span class="line">Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100)</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果<strong>不给 title 赋值</strong>，SQL 就会变成这样：<code>select * from user where and author like #&#123;author&#125;</code></p><p>这样的 SQL 明显是非法的，如何解决？</p><p><strong>解决方案：</strong></p><ol><li>在 where 添加后面添加 1=1, 以后的条件都 <code>and xxx``（不推荐, 会导致数据库性损失）</code></li><li>MyBatis 使用 <code>where</code> 标签来将所有的查询条件包括在内，MyBatis 会<code>**自动的忽略 where 后第一个不合法的 and 或 or**</code>, 并且在<code>**有条件的情况下自动拼接上 where**</code></li></ol><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>Mapper 接口和测试不变，对 <code>if</code> 演示的方法映射进行改造！！！</p><h4 id="方法映射-1"><a href="#方法映射-1" class="headerlink" title="方法映射"></a>方法映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- where --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and title like #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and author like #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-13"><a href="#测试用例-13" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWhere</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setTitle(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    blog.setAuthor(<span class="string">&quot;%谢%&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; list = mapper.getByBlog(blog);</span><br><span class="line">    list.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-9"><a href="#控制台打印-9" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MyBatis帮我们加上了where并且忽略了where后面第一个不合法的and或or</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] ==&gt;  Preparing: select * from blog WHERE author like ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] ==&gt; Parameters: %谢%(String)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">Blog(id=0001, title=hong/My-Note, author=谢禹宏, createTime=2020-01-01, views=100)</span><br></pre></td></tr></table></figure><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>我们进行模糊查询时，每次给属性赋值都加上了 <code>%%</code>，显示的加上通配符，这样并不是很好，应该让 MyBatis 为我们加上通配符，想要完成这个功能需要使用 <code>bind</code> 元素。</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。<strong>通常用来拼接模糊查询</strong></p><p>Mapper 接口和测试不变，对 <code>where</code> 演示的方法映射进行改造！！！</p><h4 id="方法映射-2"><a href="#方法映射-2" class="headerlink" title="方法映射"></a>方法映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- bind --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;newTitle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + title + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">            and title like #&#123;newTitle&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;newAuthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + author + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">            and author like #&#123;newAuthor&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-14"><a href="#测试用例-14" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    <span class="comment">// 直接赋值了一个y, 没有使用通配符</span></span><br><span class="line">    blog.setTitle(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; list = mapper.getByBlog(blog);</span><br><span class="line">    list.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-10"><a href="#控制台打印-10" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] ==&gt;  Preparing: select * from blog WHERE title like ? </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MyBatis为sql语句赋值的参数, 可以发现y的左右两边加上了%通配符</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] ==&gt; Parameters: %y%(String)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlog]-[DEBUG] &lt;==      Total: 3</span><br><span class="line">Blog(id=0001, title=hong/My-Note, author=谢禹宏, createTime=2020-01-01, views=100)</span><br><span class="line">Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100)</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)</span><br></pre></td></tr></table></figure><p>到这里，我们的 <code>getByBlog</code> 方法就变得很优雅了！！！</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set</code>元素会动态地在行首插入 <code>SET</code>关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><h4 id="接口方法-5"><a href="#接口方法-5" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改, 但是只修改属性值不为null的属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="方法映射-3"><a href="#方法映射-3" class="headerlink" title="方法映射"></a>方法映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            , title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            , author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span></span><br><span class="line">            , create_time = #&#123;createTime&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;views != null and views &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            , views = #&#123;views&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-15"><a href="#测试用例-15" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testSet()&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setId(<span class="string">&quot;0001&quot;</span>);</span><br><span class="line">    blog.setCreateTime(Date.valueOf(<span class="string">&quot;2020-1-1&quot;</span>));</span><br><span class="line">    <span class="keyword">int</span> update = mapper.update(blog);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-11"><a href="#控制台打印-11" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># mybatis帮我们加上了set关键字, 并且删除了set后面第一个不合法的逗号</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.update]-[DEBUG] ==&gt;  Preparing: update blog SET create_time = ? where id = ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.update]-[DEBUG] ==&gt; Parameters: 2020-01-01(Date), 0001(String)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.update]-[DEBUG] &lt;==    Updates: 1</span><br></pre></td></tr></table></figure><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose{when, otherwise}"></a>choose{when, otherwise}</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。<code>（choose --&gt; switch，when --&gt; case，otherwise --&gt; default）</code></p><h4 id="接口方法-6"><a href="#接口方法-6" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有id, 根据id精准匹配; 有title就根据title进行模糊查询; 如果都没有就查询author为苞米豆的blog</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getByBlogChoose</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="方法映射-4"><a href="#方法映射-4" class="headerlink" title="方法映射"></a>方法映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByBlogChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null and id &gt; 0&quot;</span>&gt;</span></span><br><span class="line">                and id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null and title.trim() != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + title + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">                and title like #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and author = &#x27;苞米豆&#x27;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-16"><a href="#测试用例-16" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testChoose</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值 id 和 title</span></span><br><span class="line">    Blog blog1 = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog1.setId(<span class="string">&quot;0001&quot;</span>);</span><br><span class="line">    blog1.setTitle(<span class="string">&quot;my&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; list1 = mapper.getByBlogChoose(blog1);</span><br><span class="line">    System.out.println(list1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只赋值 title</span></span><br><span class="line">    Blog blog2 = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog2.setTitle(<span class="string">&quot;my&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; list2 = mapper.getByBlogChoose(blog2);</span><br><span class="line">    System.out.println(list2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 什么都不赋值</span></span><br><span class="line">    List&lt;Blog&gt; list3 = mapper.getByBlogChoose(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(list3);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-12"><a href="#控制台打印-12" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 给 id 和 title 属性赋值, 因为choose只会进入一个hwen, 所以查询条件只有id, 没有title</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] ==&gt;  Preparing: select * from blog WHERE id = ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] ==&gt; Parameters: 0001(String)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[Blog(id=0001, title=hong/My-Note, author=谢禹宏, createTime=2020-01-01, views=100)]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 只给 title 属性赋值, 查询条件加上了title</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] ==&gt;  Preparing: select * from blog WHERE title like ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] ==&gt; Parameters: %my%(String)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] &lt;==      Total: 3</span><br><span class="line">[Blog(id=0001, title=hong/My-Note, author=谢禹宏, createTime=2020-01-01, views=100), Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100), Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 什么都没给, 传了一个null, 进入了otherwise中</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] ==&gt;  Preparing: select * from blog WHERE author = &#x27;苞米豆&#x27; </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByBlogChoose]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100)]</span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><h4 id="接口方法-7"><a href="#接口方法-7" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过id的List集合查询多条数据</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getByIds</span><span class="params">(List&lt;String&gt; ids)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="方法映射-5"><a href="#方法映射-5" class="headerlink" title="方法映射"></a>方法映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;list != null and list.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                collection: 指定遍历的集合; 只能写与集合类型对应的名字,如果想使用其他名称则必须使用@param注解指定名称</span></span><br><span class="line"><span class="comment">                item: 将当前遍历的元素赋值给指定的变量</span></span><br><span class="line"><span class="comment">                separator: 元素之间的分隔符</span></span><br><span class="line"><span class="comment">                open: 指定开始符号</span></span><br><span class="line"><span class="comment">                close: 指定结束符号</span></span><br><span class="line"><span class="comment">                index: 遍历List的时候是index索引, item是当前值</span></span><br><span class="line"><span class="comment">                       遍历Map的时候index是map的key, item是map的值</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;collection&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and id in(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-17"><a href="#测试用例-17" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    String []ids = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;0001&quot;</span>, <span class="string">&quot;0002&quot;</span>, <span class="string">&quot;0003&quot;</span>&#125;;</span><br><span class="line">    List&lt;Blog&gt; list = mapper.getByIds(Arrays.asList(ids));</span><br><span class="line">    list.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-13"><a href="#控制台打印-13" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.BlogMapper.getByIds]-[DEBUG] ==&gt;  Preparing: select * from blog WHERE id in( ? , ? , ? ) </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByIds]-[DEBUG] ==&gt; Parameters: 0001(String), 0002(String), 0003(String)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByIds]-[DEBUG] &lt;==      Total: 3</span><br><span class="line">Blog(id=0001, title=hong/My-Note, author=谢禹宏, createTime=2020-01-01, views=100)</span><br><span class="line">Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100)</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)</span><br></pre></td></tr></table></figure><h3 id="Sql-抽取可重用SQL片段"><a href="#Sql-抽取可重用SQL片段" class="headerlink" title="Sql (抽取可重用SQL片段)"></a>Sql (抽取可重用SQL片段)</h3><p>场景：在真实开发中我们不能写这样的 SQL 语句 <code>select * from xxx</code>，是不能写 <code>*</code> 的，但是每写一个查询语句都写上全部的列名，就造成了代码的冗余，而且也不易于维护。还好 MyBatis 提供了解决方案。如果表中字段发生了更改，我们只需要修改 <code>sql</code> 片段就 OK 了。</p><h4 id="接口方法-8"><a href="#接口方法-8" class="headerlink" title="接口方法"></a>接口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="方法映射-6"><a href="#方法映射-6" class="headerlink" title="方法映射"></a>方法映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    sql: 抽取片段</span></span><br><span class="line"><span class="comment">        id: 唯一标识</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">    id, title, author, create_time, views</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.hong.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        include: 引入sql节点定义的sql片段</span></span><br><span class="line"><span class="comment">            refid: 引用指定id的sql片段</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;column&quot;</span>/&gt;</span> from blog</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例-18"><a href="#测试用例-18" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSql</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; list = mapper.getAll();</span><br><span class="line">    list.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台打印-14"><a href="#控制台打印-14" class="headerlink" title="控制台打印"></a>控制台打印</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># mybatis为我们拼接上了列名</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getAll]-[DEBUG] ==&gt;  Preparing: select id, title, author, create_time, views from blog </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getAll]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getAll]-[DEBUG] &lt;==      Total: 5</span><br><span class="line">Blog(id=0001, title=hong/My-Note, author=谢禹宏, createTime=2020-01-01, views=100)</span><br><span class="line">Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100)</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)</span><br><span class="line">Blog(id=0004, title=Hello Vuew, author=尤雨溪, createTime=2021-01-21, views=100)</span><br><span class="line">Blog(id=0005, title=Hello Linux, author=林纳斯, createTime=2001-04-21, views=120)</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>什么是缓存 [ Cache ] ? </li></ol><ul><li><ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存（内存）中，用户查询数据就不用从数据库中查询，从缓存中查询，从而提高查询小龙，解决了高并发系统的性能问题。</li></ul></li></ul><ol><li>为什么使用缓存 </li></ol><ul><li><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率</li></ul></li></ul><ol><li>什么样的数据能使用缓存？ </li></ol><ul><li><ul><li>经常查询并且不经常改变的数据</li></ul></li></ul><h3 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两个缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong> </p></li><li><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li></ul></li><li><ul><li>为了提高拓展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来定义二级缓存</li></ul></li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li><p>一级缓存也叫本地缓存 </p></li><li><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再取查询数据库</li></ul></li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所有诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间对应一个二级缓存</p></li><li><p>工作机制 </p></li><li><ul><li>一个会话查询一条数据，这个数据会被放到当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们开启了二级缓存，会话关闭了，一级缓存中的数据会被保存到二级缓存中；</li></ul></li><li><ul><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据会放再自己对应的缓存中</li></ul></li></ul><h3 id="缓存失效的情况"><a href="#缓存失效的情况" class="headerlink" title="缓存失效的情况"></a>缓存失效的情况</h3><ul><li><p>不同的SqlSession对应不同的一级缓存</p></li><li><p>同一个SqlSession但是查询条件不同</p></li><li><p>一个SqlSession两次查询期间执行了任何一次增删改操作</p></li><li><p>同一个SqlSession两次查询期间手动清空了缓存</p></li></ul><h3 id="二级缓存的使用"><a href="#二级缓存的使用" class="headerlink" title="二级缓存的使用"></a>二级缓存的使用</h3><ul><li> 开启全局缓存  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启二级缓存总开关 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li> 开启Mapper.xml的二级缓存  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">开启mapper下的namespace的二级缓存,</span></span><br><span class="line"><span class="comment">cache标签中的所有属性都是可选的</span></span><br><span class="line"><span class="comment"> --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li> cache标签的属性  </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">eviction: 缓存的回收策略, 默认的是 LRU</span><br><span class="line">LRU – 最近最少使用的:移除最长时间不被使用的对象。</span><br><span class="line">FIFO – 先进先出:按对象进入缓存的顺序来移除它们。</span><br><span class="line">SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。</span><br><span class="line">WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</span><br><span class="line"></span><br><span class="line">flushInterval: 缓存刷新间隔, 默认不清空</span><br><span class="line">缓存多长时间清空一次, 设置一个毫秒值</span><br><span class="line"></span><br><span class="line">readOnly: 是否只读, 默认false</span><br><span class="line">true: 只读, mybatis认为所有从缓存中获取数据的操作都是只读操作, 不会修改数据。mybatis为了加快获取速度, 直接就会将数据在缓存中的引用交给用户。不安全, 速度快</span><br><span class="line">false: 非只读, mybatis觉得获取的数据可能会被修改。mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全, 速度慢。</span><br><span class="line"></span><br><span class="line">size: 缓存存放多少元素;</span><br><span class="line"></span><br><span class="line">type: 指定自定义缓存的全类名;</span><br></pre></td></tr></table></figure><h3 id="缓存原理图"><a href="#缓存原理图" class="headerlink" title="缓存原理图"></a>缓存原理图</h3><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20211127222531.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><h3 id="MyBatis整合ehcache"><a href="#MyBatis整合ehcache" class="headerlink" title="MyBatis整合ehcache"></a>MyBatis整合ehcache</h3><ol><li> 导入第三方缓存jar包和与第三方缓存整合的适配包  </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li> mapper.xml 中使用自定义缓存  </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="逆向工程-MBG"><a href="#逆向工程-MBG" class="headerlink" title="逆向工程 ( MBG )"></a>逆向工程 ( MBG )</h2><p><code>MyBatis Generator</code> 简称 <code>MBG</code> ，是一个专门为 <code>MyBatis</code> 框架使用者定制的<strong>代码生成器</strong>，可以快速的根据表生成对应的映射文件，接口，以及 <code>bean</code> 类。支持基本的增删改查，以及 <code>QBC</code> 风格的条件查询。但是表连接、存储过程等这些复杂 <code>sql</code> 的定义需要我们手工编写</p><h3 id="Maven-1"><a href="#Maven-1" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="generationConfig-xml"><a href="#generationConfig-xml" class="headerlink" title="generationConfig.xml"></a>generationConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        targetRuntime: 生成策略</span></span><br><span class="line"><span class="comment">            MyBatis3Simple: 简单版的CRUD</span></span><br><span class="line"><span class="comment">            MyBatis3: 豪华版的CRUD, 支持QBC风格</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;mybatisGenerator&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;1234&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">            NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:生成POJO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;org.hong.pojo&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;org.hong.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;org.hong.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;blog&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 运行这个单元测试, 自动生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMbg</span><span class="params">()</span> <span class="keyword">throws</span> IOException, XMLParserException, InvalidConfigurationException, SQLException, InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">&quot;IDEA使用绝对路径/generationConfig.xml&quot;</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMyBatis3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">            <span class="comment">// 1.查询所有</span></span><br><span class="line">            List&lt;Blog&gt; blogs = mapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 2.查询博客标题中带字母s的, 作者名字中带大字的</span></span><br><span class="line">            <span class="comment">// blogExample对象封装查询条件</span></span><br><span class="line">            BlogExample blogExample = <span class="keyword">new</span> BlogExample();</span><br><span class="line">            <span class="comment">// 3.创建Criteria, 这个Criteria就是拼装查询条件</span></span><br><span class="line">            BlogExample.Criteria criteria = blogExample.createCriteria();</span><br><span class="line">            <span class="comment">// andXXXYYY表示添加and条件, XXX代表字段名, YYY代表条件(like,is...)</span></span><br><span class="line">            criteria.andTitleLike(<span class="string">&quot;%s%&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.添加另外一组添加, 再次创建创建Criteria</span></span><br><span class="line">            BlogExample.Criteria criteria2 = blogExample.createCriteria();</span><br><span class="line">            <span class="comment">// 设置Criteria的条件</span></span><br><span class="line">            criteria2.andAuthorLike(<span class="string">&quot;%大%&quot;</span>);</span><br><span class="line">            <span class="comment">// 5.调用or()表示这组添加与其他Criteria的关系</span></span><br><span class="line">            blogExample.or(criteria2);</span><br><span class="line">            blogs = mapper.selectByExample(blogExample);</span><br><span class="line">            <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">                System.out.println(blog);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>Test</code> 会自动生成 <code>mapper</code> 和 <code>pojo</code>，注意：移动文件后记得改配置文件的 <code>parameterType</code>、<code>type</code> 等属性。</p><h2 id="pageHelper-分页查询"><a href="#pageHelper-分页查询" class="headerlink" title="pageHelper 分页查询"></a>pageHelper 分页查询</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>跟动态 SQL 的环境一样</p><h4 id="SQL-2"><a href="#SQL-2" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `blog`;</span><br><span class="line">CREATE TABLE `blog` (</span><br><span class="line">  `id` varchar(50) NOT NULL COMMENT &#x27;博客id&#x27;,</span><br><span class="line">  `title` varchar(100) NOT NULL COMMENT &#x27;博客标题&#x27;,</span><br><span class="line">  `author` varchar(30) NOT NULL COMMENT &#x27;博客作者&#x27;,</span><br><span class="line">  `create_time` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `views` int(30) NOT NULL COMMENT &#x27;浏览量&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0001&#x27;, &#x27;hong/My-Note&#x27;, &#x27;谢禹宏&#x27;, &#x27;2021-04-21 00:00:00&#x27;, &#x27;100&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0002&#x27;, &#x27;MyBatis-Plus&#x27;, &#x27;苞米豆&#x27;, &#x27;2021-04-21 00:00:00&#x27;, &#x27;100&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0003&#x27;, &#x27;Hello MyBatis&#x27;, &#x27;母鸡&#x27;, &#x27;2021-04-21 00:00:00&#x27;, &#x27;120&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0004&#x27;, &#x27;Hello Vuew&#x27;, &#x27;尤雨溪&#x27;, &#x27;2021-01-21 00:00:00&#x27;, &#x27;100&#x27;);</span><br><span class="line">INSERT INTO `blog` VALUES (&#x27;0005&#x27;, &#x27;Hello Linux&#x27;, &#x27;林纳斯&#x27;, &#x27;2001-04-21 00:00:00&#x27;, &#x27;120&#x27;);</span><br></pre></td></tr></table></figure><h4 id="Maven-2"><a href="#Maven-2" class="headerlink" title="Maven"></a>Maven</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实体类-5"><a href="#实体类-5" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date create_time;</span><br><span class="line">    <span class="keyword">private</span> Integer views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyBatisUtil-工具类-3"><a href="#MyBatisUtil-工具类-3" class="headerlink" title="MyBatisUtil 工具类"></a>MyBatisUtil 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// openSession(): 此方式打开SQL会话, 事务是开启状态</span></span><br><span class="line">        <span class="comment">// openSession(true): 此方式打开SQL会话, 事务是关闭状态</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jdbc-properties-3"><a href="#jdbc-properties-3" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h4 id="log4j-properties-3"><a href="#log4j-properties-3" class="headerlink" title="log4j.properties"></a>log4j.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h4 id="MyBatis-核心配置文件-3"><a href="#MyBatis-核心配置文件-3" class="headerlink" title="MyBatis 核心配置文件"></a>MyBatis 核心配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- configuration: 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部配置文件, 放在最前面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置日志输出, 方便观察sql语句和参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰命名法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments配置项目的运行环境, 可以配置多个</span></span><br><span class="line"><span class="comment">        default: 启用的环境</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册!!! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.hong.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="BlogMapper-java-1"><a href="#BlogMapper-java-1" class="headerlink" title="BlogMapper.java"></a>BlogMapper.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BlogMapper-xml-1"><a href="#BlogMapper-xml-1" class="headerlink" title="BlogMapper.xml"></a>BlogMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置拦截器插件"><a href="#配置拦截器插件" class="headerlink" title="配置拦截器插件"></a>配置拦截器插件</h3><h4 id="MyBatis-核心配置文件-4"><a href="#MyBatis-核心配置文件-4" class="headerlink" title="MyBatis 核心配置文件"></a>MyBatis 核心配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Spring-配置文件-SSM整合后的配置"><a href="#Spring-配置文件-SSM整合后的配置" class="headerlink" title="Spring 配置文件 ( SSM整合后的配置 )"></a>Spring 配置文件 ( SSM整合后的配置 )</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意其他配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="接口方法-9"><a href="#接口方法-9" class="headerlink" title="接口方法"></a>接口方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from blog&quot;)</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getByPage</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="测试用例-19"><a href="#测试用例-19" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Blog;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHelperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用PageHelper类的startPage方法指定查询页数和每页的数量, 会返回一个page对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 原理: 调用startPage方法后, PageHelper会在当前线程中绑定一个page对象, 跟返回的对象是同一个对象,</span></span><br><span class="line"><span class="comment">         *       然后在MyBatis执行我们的查询时, 会被PageHelper拦截, 并拿出与当前线程绑定的page对象,</span></span><br><span class="line"><span class="comment">         *       并修改MyBatis即将执行的sql语句, 为sql语句添加上分页的功能。</span></span><br><span class="line"><span class="comment">         *       为什么PageHelper会拦截MyBatis的执行, 这是MyBatis的插件机制的问题, 想要了解自己去百度。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.getByPage();</span><br><span class="line">        blogs.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// page对象封装了查询信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前页码:&quot;</span> + page.getPageNum());</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数:&quot;</span> + page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;每页的记录数:&quot;</span> + page.getPageSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;总页码:&quot;</span> + page.getPages());</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制台打印-15"><a href="#控制台打印-15" class="headerlink" title="控制台打印"></a>控制台打印</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># PageHelper首先会查询表中的总记录数</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] ==&gt;  Preparing: SELECT count(0) FROM blog </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] &lt;==      Total: 1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 接着MyBatis会发送被PageHelper改造过的sql语句, 进行分页查询</span></span></span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] ==&gt;  Preparing: select * from blog LIMIT ?, ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] ==&gt; Parameters: 2(Long), 2(Integer)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] &lt;==      Total: 2</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)</span><br><span class="line">Blog(id=0004, title=Hello Vuew, author=尤雨溪, createTime=2021-01-21, views=100)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># page对象封装的信息</span></span></span><br><span class="line">当前页码:2</span><br><span class="line">总记录数:5</span><br><span class="line">每页的记录数:2</span><br><span class="line">总页码:3</span><br></pre></td></tr></table></figure><h3 id="常见的使用方式"><a href="#常见的使用方式" class="headerlink" title="常见的使用方式"></a>常见的使用方式</h3><p>更多使用方式去看官网，知道这几种就够用了。</p><p>方式一与方式二的环境跟上面一样，只有测试用例不一样</p><h4 id="方式一-推荐使用"><a href="#方式一-推荐使用" class="headerlink" title="方式一 ( 推荐使用 )"></a>方式一 ( 推荐使用 )</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    <span class="comment">// startPage(起始页数, 每页的数量)</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.getByPage();</span><br><span class="line">    blogs.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] ==&gt;  Preparing: SELECT count(0) FROM blog </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] ==&gt;  Preparing: select * from blog LIMIT ?, ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] ==&gt; Parameters: 2(Long), 2(Integer)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] &lt;==      Total: 2</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)</span><br><span class="line">Blog(id=0004, title=Hello Vuew, author=尤雨溪, createTime=2021-01-21, views=100)</span><br></pre></td></tr></table></figure><h4 id="方式二-推荐使用"><a href="#方式二-推荐使用" class="headerlink" title="方式二 ( 推荐使用 )"></a>方式二 ( 推荐使用 )</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    <span class="comment">// offsetPage(起始索引, 查询条数)</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.offsetPage(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.getByPage();</span><br><span class="line">    blogs.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] ==&gt;  Preparing: SELECT count(0) FROM blog </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage_COUNT]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] ==&gt;  Preparing: select * from blog LIMIT ?, ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] ==&gt; Parameters: 1(Long), 3(Integer)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getByPage]-[DEBUG] &lt;==      Total: 3</span><br><span class="line">Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100)</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120)</span><br><span class="line">Blog(id=0004, title=Hello Vuew, author=尤雨溪, createTime=2021-01-21, views=100)</span><br></pre></td></tr></table></figure><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>配置 <code>PageHelper</code> 插件时<strong>配置</strong> <code>**supportMethodsArguments**</code> <strong>属性为</strong> <code>**true**</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportMethodsArguments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="接口方法-10"><a href="#接口方法-10" class="headerlink" title="接口方法"></a>接口方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们不需要处理pageNum和pageSize</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from blog&quot;)</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getPageMethod</span><span class="params">(<span class="meta">@Param(&quot;pageNum&quot;)</span>Integer pageNum, // 起始页数, 必须使用<span class="meta">@Param</span>注解指定key为pageNum</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@Param(&quot;pageSize&quot;)</span>Integer pageSize)</span></span>; <span class="comment">// 每页数量, 必须使用@Param注解指定key为pageSize</span></span><br></pre></td></tr></table></figure><h5 id="测试用例-20"><a href="#测试用例-20" class="headerlink" title="测试用例"></a>测试用例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注意:</span></span><br><span class="line"><span class="comment">    *  1.如果传入的是0或者负数, PageHelper依旧会进行分页</span></span><br><span class="line"><span class="comment">    *  2.如果传入的两个参数中任意一个参数为null, PageHelper将不会进行分页</span></span><br><span class="line"><span class="comment">    *  3.根据这个特性, 建议在声明接口方法时不要使用int, 而是使用Integer</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.getPageMethod(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    blogs.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="控制台打印-16"><a href="#控制台打印-16" class="headerlink" title="控制台打印"></a>控制台打印</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.BlogMapper.getPageMethod_COUNT]-[DEBUG] ==&gt;  Preparing: SELECT count(0) FROM blog </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPageMethod_COUNT]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPageMethod_COUNT]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPageMethod]-[DEBUG] ==&gt;  Preparing: select * from blog LIMIT ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPageMethod]-[DEBUG] ==&gt; Parameters: 2(Integer)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPageMethod]-[DEBUG] &lt;==      Total: 2</span><br><span class="line">Blog(id=0001, title=hong/My-Note, author=谢禹宏, createTime=2020-01-01, views=100)</span><br><span class="line">Blog(id=0002, title=MyBatis-Plus, author=苞米豆, createTime=2021-04-21, views=100)</span><br></pre></td></tr></table></figure><h4 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h4><p>在实体类中声明 <code>pageNum</code> 和 <code>pageSize</code> 属性。不建议使用，侵入性太强 了。</p><h5 id="实体类-6"><a href="#实体类-6" class="headerlink" title="实体类"></a>实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Integer views;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当实体对象中的pageNum!= null &amp;&amp; pageSize!= null时, 会自动分页</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口方法-11"><a href="#接口方法-11" class="headerlink" title="接口方法"></a>接口方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from blog&quot;)</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getPojo</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="测试用例-21"><a href="#测试用例-21" class="headerlink" title="测试用例"></a>测试用例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setPageNum(<span class="number">2</span>);</span><br><span class="line">    blog.setPageSize(<span class="number">2</span>);</span><br><span class="line">    List&lt;Blog&gt; pojo = mapper.getPojo(blog);</span><br><span class="line">    pojo.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="控制台打印-17"><a href="#控制台打印-17" class="headerlink" title="控制台打印"></a>控制台打印</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[main] [org.hong.mapper.BlogMapper.getPojo_COUNT]-[DEBUG] ==&gt;  Preparing: SELECT count(0) FROM blog </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPojo_COUNT]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPojo_COUNT]-[DEBUG] &lt;==      Total: 1</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPojo]-[DEBUG] ==&gt;  Preparing: select * from blog LIMIT ?, ? </span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPojo]-[DEBUG] ==&gt; Parameters: 2(Long), 2(Integer)</span><br><span class="line">[main] [org.hong.mapper.BlogMapper.getPojo]-[DEBUG] &lt;==      Total: 2</span><br><span class="line">Blog(id=0003, title=Hello MyBatis, author=母鸡, createTime=2021-04-21, views=120, pageNum=null, pageSize=null)</span><br><span class="line">Blog(id=0004, title=Hello Vuew, author=尤雨溪, createTime=2021-01-21, views=100, pageNum=null, pageSize=null)</span><br></pre></td></tr></table></figure><h3 id="常用的属性"><a href="#常用的属性" class="headerlink" title="常用的属性"></a>常用的属性</h3><ul><li><p><code>pageSizeZero</code>：默认值为 <code>false</code>，当该参数设置为 <code>true</code> 时，如果 <code>pageSize=0</code> 或者 <code>RowBounds.limit = 0</code> 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 <code>Page</code> 类型）。</p></li><li><p><code>**reasonable**</code>：分页合理化参数，默认值为<code>false</code>。当该参数设置为 <code>true</code> 时，<code>pageNum&lt;=0</code> 时会查询第一页， <code>pageNum&gt;pages</code>（超过总数时），会查询最后一页。默认<code>false</code> 时，直接根据参数进行查询。</p></li><li><p><code>supportMethodsArguments</code>：支持通过 Mapper 接口参数来传递分页参数，默认值<code>false</code>，分页插件会从查询方法的参数值中，自动根据上面 <code>params</code> 配置的字段中取值，查找到合适的值时就会自动分页。</p></li></ul><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>使用 <code>pageHelper</code> 分页查询的环境进行演示。</p><h3 id="方法接口"><a href="#方法接口" class="headerlink" title="方法接口"></a>方法接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into blog values(#&#123;id&#125;, #&#123;title&#125;, #&#123;author&#125;, #&#123;createTime&#125;, #&#123;views&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="测试用例-22"><a href="#测试用例-22" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ExecutorType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Blog;</span><br><span class="line"><span class="keyword">import</span> org.hong.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = MyBatisUtil.getSqlSessionFactory();</span><br><span class="line">        <span class="comment">// 调用openSession时传入ExecutorType枚举类的对象, 指明执行类型</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">                blog.setId(<span class="string">&quot;00&quot;</span> + i);</span><br><span class="line">                blog.setTitle(<span class="string">&quot;测试Batch&quot;</span> + <span class="string">&quot;-&quot;</span> + i);</span><br><span class="line">                blog.setAuthor(<span class="string">&quot;谢禹宏&quot;</span>);</span><br><span class="line">                blog.setCreateTime(Date.valueOf(LocalDate.now()));</span><br><span class="line">                blog.setViews(i);</span><br><span class="line">                mapper.save(blog);</span><br><span class="line">                <span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//手动每500条提交一次, 提交后无法回滚</span></span><br><span class="line">                    sqlSession.commit();</span><br><span class="line">                    <span class="comment">//清理缓存, 防止溢出</span></span><br><span class="line">                    sqlSession.clearCache();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            System.out.println(end - start);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyBatis-Spring-整合配置"><a href="#MyBatis-Spring-整合配置" class="headerlink" title="MyBatis-Spring 整合配置"></a>MyBatis-Spring 整合配置</h3><p>在 <code>Spring</code> 配置文件中配置一个独立的 <code>SqlSession</code> 对象，将这个对象设置为批处理模式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;executorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BATCH&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>service</code> 层自动装配这个对象，使用时 <code>getMapper</code> 获取需要的 <code>Mapper</code>，再进行批处理。</p><h2 id="SSM（Spring、SpringMVC、MyBatis）"><a href="#SSM（Spring、SpringMVC、MyBatis）" class="headerlink" title="SSM（Spring、SpringMVC、MyBatis）"></a>SSM（Spring、SpringMVC、MyBatis）</h2><h3 id="Maven-3"><a href="#Maven-3" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jstl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-aop是基于aspect, 因此导入aspectjweaver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.geronimo.bundles<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8_2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis-spring, mybatis整合spring的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MBG --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.启动Spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置Spring配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.SpringMVC的前端控制器, 拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置SpringMVC配置文件的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置启动级别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.字符编码过滤器, 一定放在所有过滤器的前面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否需要字符编码过滤器设置请求编码, 设置的字符集为encoding --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否需要字符编码过滤器设置响应编码, 设置的字符集为encoding --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.REST风格的URI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC配置文件, 包含网站跳转逻辑的控制配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.hong&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 只扫描控制器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器, 方便页面返回 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 两个标准配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将SpringMVC不能处理的请求交给Tomcat --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 能支持SpringMVC更高级的一些功能, JSR303校验, 快捷的ajax...映射动态请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dbconfig-properties"><a href="#dbconfig-properties" class="headerlink" title="dbconfig.properties"></a>dbconfig.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql:///ssm</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring配置文件, 这里主要配置和业务逻辑有关的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.hong&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:dbconfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定MyBatis全局配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定MyBatis Mapper文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:org/hong/mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描器, 将Mapper接口生成代理注入到Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定mapper接口所在包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hong.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定sqlSessionFactoryBean配置在Spring中的id值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个专门用来进行Batch操作的sqlSession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置执行类型为Batch --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;executorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BATCH&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务控制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制主数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用xml配置形式的事务(重要的都是使用xml) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.hong.service..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务增强 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPoint&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务增强, 事务如何切入; 并指定事务管理器, 事务管理器名称默认就是transactionManager --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 所有方法都是事务方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 以get开始的方法设置只读事务, 底层有优化 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4j-properties-4"><a href="#log4j-properties-4" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- configuration: 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰命名法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量起别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.hong.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20211127222634.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><h3 id="测试-SSM"><a href="#测试-SSM" class="headerlink" title="测试 SSM"></a>测试 SSM</h3><p>测试查询全部</p><h4 id="SQL-3"><a href="#SQL-3" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_dept` (</span><br><span class="line">  `dept_id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `dept_name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`dept_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(`dept_id`, `dept_name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;开发部&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(`dept_id`, `dept_name`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;测试部&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_employee` (</span><br><span class="line">  `emp_id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `emp_name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `emp_gender` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `emp_email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d_id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`emp_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_employee`(`emp_id`, `emp_name`, `emp_gender`, `emp_email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Hong&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;190464706@qq.com&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_employee`(`emp_id`, `emp_name`, `emp_gender`, `emp_email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;Tom@qq.com&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_employee`(`emp_id`, `emp_name`, `emp_gender`, `emp_email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Jerry&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;Jerry@qq.com&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_employee`(`emp_id`, `emp_name`, `emp_gender`, `emp_email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;Bob@qq.com&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_employee`(`emp_id`, `emp_name`, `emp_gender`, `emp_email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;Lucy&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;Lucy@qq.com&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_employee`(`emp_id`, `emp_name`, `emp_gender`, `emp_email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;Jessica&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;Jessica@qq.com&#x27;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="实体类-7"><a href="#实体类-7" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-接口-6"><a href="#Mapper-接口-6" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-xml-文件-4"><a href="#Mapper-xml-文件-4" class="headerlink" title="Mapper.xml 文件"></a>Mapper.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.hong.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.hong.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_gender&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_email&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmployeeJoin&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;org.hong.mapper.DeptMapper.BaseResultMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;JoinColumn&quot;</span>&gt;</span></span><br><span class="line">    emp_id, emp_name, emp_gender, emp_email, dept_id, dept_name</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmployeeJoin&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;JoinColumn&quot;</span>/&gt;</span> from tbl_employee left join tbl_dept on d_id = dept_id</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="service-接口"><a href="#service-接口" class="headerlink" title="service 接口"></a>service 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serviceimpl-实现类"><a href="#serviceimpl-实现类" class="headerlink" title="serviceimpl 实现类"></a>serviceimpl 实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.service.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.hong.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 MyBatis-Spring 之后，你不再需要直接使用 SqlSessionFactory 了，</span></span><br><span class="line">        <span class="comment">// 因为你的 bean 可以被注入一个线程安全的 SqlSession，</span></span><br><span class="line">        <span class="comment">// 它能基于 Spring 的事务配置来自动提交、回滚、关闭 session。</span></span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EmployeeController"><a href="#EmployeeController" class="headerlink" title="EmployeeController"></a>EmployeeController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hong.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hong.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.hong.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/employee&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = employeeService.getAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;employees&quot;</span>, employees);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整合完毕！！！</p><h4 id="list-jsp"><a href="#list-jsp" class="headerlink" title="list.jsp"></a>list.jsp</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 谢禹宏</span><br><span class="line">  Date: <span class="number">2021</span>-<span class="number">04</span>-<span class="number">22</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">37</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Gender&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Email&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;DeptName&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.employees&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;employee&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;employee.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;employee.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;employee.gender&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;employee.email&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;employee.dept.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="访问-employee"><a href="#访问-employee" class="headerlink" title="访问 /employee"></a>访问 <code>/employee</code></h4><p><strong>控制台打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MyBatis-Spring帮我们创建了sqlSession对象</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Creating a new SqlSession</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 并且注册了一个transaction事务到sqlSession对象中</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3a361206]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># JDBC Connection交给Spring管理</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.mybatis.spring.transaction.SpringManagedTransaction]-[DEBUG] JDBC Connection [com.mysql.jdbc.JDBC4Connection@3fe4f94] will be managed by Spring</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MyBatis发送sql</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] ==&gt;  Preparing: select emp_id, emp_name, emp_gender, emp_email, dept_id, dept_name from tbl_employee left join tbl_dept on d_id = dept_id </span><br><span class="line">[http-nio-8080-exec-6] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] ==&gt; Parameters: </span><br><span class="line">[http-nio-8080-exec-6] [org.hong.mapper.EmployeeMapper.getAll]-[DEBUG] &lt;==      Total: 2</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 进入事务和sqlSession释放环节</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3a361206]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 提交事务</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Transaction synchronization committing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3a361206]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 注销事务</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3a361206]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭sqlSession</span></span></span><br><span class="line">[http-nio-8080-exec-6] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3a361206]</span><br></pre></td></tr></table></figure><h3 id="SqlSessionTemplate"><a href="#SqlSessionTemplate" class="headerlink" title="SqlSessionTemplate"></a>SqlSessionTemplate</h3><p><code>SqlSessionTemplate</code> 是 MyBatis-Spring 的核心。<strong>作为</strong> <code>**SqlSession**</code> <strong>的一个实现</strong>，这意味着可以使用它无缝代替你代码中已经在使用的 <code>SqlSession</code>。 <code>**SqlSessionTemplate**</code> <strong>是线程安全的</strong>，可以被多个 DAO 或映射器所共享使用。</p><p>当调用 SQL 方法时（包括由 <code>getMapper()</code> 方法返回的映射器中的方法），<code>**SqlSessionTemplate**</code> <strong>将会保证使用的</strong> <code>**SqlSession**</code> <strong>与当前 Spring 的事务相关。 此外，它管理 session 的生命周期，包含必要的关闭、提交或回滚操作。</strong>另外，它也负责将 MyBatis 的异常翻译成 Spring 中的 <code>DataAccessExceptions</code>。</p><p>由于模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该<strong>总是</strong>用 <code>SqlSessionTemplate</code> 来替换 MyBatis 默认的 <code>DefaultSqlSession</code> 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>可以使用 <code>SqlSessionFactory</code> 作为构造方法的参数来创建 <code>SqlSessionTemplate</code> 对象。</p><p><strong>总结</strong></p><ul><li><code>SqlSessionTemplate</code> 是 <code>SqlSession</code> 接口的一个实现类。<code>SqlSessionTemplate</code>  就是 <code>SqlSession</code>，并且是线程安全的。</li><li><code>SqlSessionTemplate</code> 会管理 <code>seesion</code> 的生命周期，包括事务的提交或回滚和 <code>session</code> 的关闭。我们使用时不需要关注 <code>sqlSession</code> 的创建、关闭和事务提交或回滚。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型程序设计</title>
      <link href="/2021/07/30/%E6%B3%9B%E5%9E%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/07/30/%E6%B3%9B%E5%9E%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要使用泛型程序设计"><a href="#为什么要使用泛型程序设计" class="headerlink" title="为什么要使用泛型程序设计"></a>为什么要使用泛型程序设计</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>异常，断言和日志</title>
      <link href="/2021/07/27/%E5%BC%82%E5%B8%B8%EF%BC%8C%E6%96%AD%E8%A8%80%E5%92%8C%E6%97%A5%E5%BF%97/"/>
      <url>/2021/07/27/%E5%BC%82%E5%B8%B8%EF%BC%8C%E6%96%AD%E8%A8%80%E5%92%8C%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p>假设Java运行期间出现了一个错误。如果由于出现错误导致某些操作没有完成，程序应该：</p><ul><li>返回到一种安全的状态，并能够让用户执行其他的命令；或者</li><li>允许用户保存所有的工作成果，并以妥善的方式结束程序！</li></ul><p>异常处理的任务就是将控制权从产生错误的地方转移到能够处理这些情况的错误处理器。</p><p><strong>所有的异常都是由Throwable继承而来，但在下一层立即分解为两个分支：error和Exception</strong></p><h4 id="Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。程序不应抛出这种类型的错误，除了通知用户几乎没有其他处理方法。"><a href="#Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。程序不应抛出这种类型的错误，除了通知用户几乎没有其他处理方法。" class="headerlink" title="Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。程序不应抛出这种类型的错误，除了通知用户几乎没有其他处理方法。"></a>Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。程序不应抛出这种类型的错误，除了通知用户几乎没有其他处理方法。</h4><h4 id="重点关注Exception层次结构。分为RuntimeException与其他异常两大分支"><a href="#重点关注Exception层次结构。分为RuntimeException与其他异常两大分支" class="headerlink" title="重点关注Exception层次结构。分为RuntimeException与其他异常两大分支"></a>重点关注Exception层次结构。分为RuntimeException与其他异常两大分支</h4><p>一般规则是：由编程错误引发的为RuntimeException        “如果出现RuntimeException异常，那么一定是你的问题”</p><p>派生于RuntimeException的异常包括以下问题：</p><ul><li>错误的强制类型转换</li><li>数组越界</li><li>null</li></ul><p>不是RuntimeException的异常包括：</p><ul><li>试图超越文件末尾继续读取数据。</li><li>试图打开一个不存在的文件</li><li>试图根据给定的字符串查找Class对象。而这个类不存在。</li></ul><p>Java语言规范将派生于Error类或RuntimeException类的所有异常称为非检查型（unchecked）异常，所有其他的异常称为检查型（checked）异常。</p><h3 id="声明检查型异常"><a href="#声明检查型异常" class="headerlink" title="声明检查型异常"></a>声明检查型异常</h3><p>要在方法的首部指出这个方法可能抛出的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure><p>不必声明该方法可能抛出的所有异常，需要下列4种情况会抛出异常：</p><ol><li>调用了一个抛出检查型异常的方法，如果，FileInputStream构造器。</li><li>检测到一个错误，并且利用throw语句抛出一个检查型异常。</li><li>程序出现错误，例如a[-1]=0会抛出一个非检查型异常。</li><li>Java虚拟机或运行时库出现内部错误。</li></ol><p>前两种，必须告诉方法有可能抛出的异常。如果没有处理器捕获这个异常，当前执行的线程将会终止。</p><p>子类声明的异常不能比父类更加通用。</p><h3 id="如何抛出异常"><a href="#如何抛出异常" class="headerlink" title="如何抛出异常"></a>如何抛出异常</h3><ol><li>找到一个合适的异常类</li><li>创建这个类的一个对象。</li><li>将对象抛出（throw）</li></ol><h3 id="创建异常类"><a href="#创建异常类" class="headerlink" title="创建异常类"></a>创建异常类</h3><p>定义一个派生于Exception的类，或派生于Exception子类的类。习惯做法是：自定义的这个类应该包含两个构造器，一个是默认构造器，一个是包含详细信息的</p><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><h3 id="捕获异常-1"><a href="#捕获异常-1" class="headerlink" title="捕获异常"></a>捕获异常</h3><p>要想捕获一个异常，需要设置try/catch语句块。</p><p>可以如下捕获异常并将它抛出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更推荐，将原始异常设置为新异常的“原因”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">......</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">    NullPointerException nullPointerException = <span class="keyword">new</span> NullPointerException(e.getMessage());</span><br><span class="line">    e.initCause(e);</span><br><span class="line">    <span class="keyword">throw</span> nullPointerException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>捕获到这个异常时，可以使用下面语句获取原始异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Throwable original = caughtException.getCause();</span><br></pre></td></tr></table></figure><p>有时可能只是单纯想记录异常，并重新抛出，而不做任何改变：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">......</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">    logger.log(level,message,e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try-with-Resources语句"><a href="#try-with-Resources语句" class="headerlink" title="try-with-Resources语句"></a>try-with-Resources语句</h3><p>try块退出时，会自动调用res.close(),只要需要关闭资源，就要尽可能使用try-with-Resources语句.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\13975\\Desktop\\test.txt&quot;</span>), String.valueOf(StandardCharsets.UTF_8)))&#123;</span><br><span class="line"><span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">System.out.println(scanner.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析堆栈轨迹元素"><a href="#分析堆栈轨迹元素" class="headerlink" title="分析堆栈轨迹元素"></a>分析堆栈轨迹元素</h3><p>可以调用Throwable.printStackTrace方法访问堆栈轨迹的文本描述信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Throwable();</span><br><span class="line"><span class="keyword">var</span> out = <span class="keyword">new</span> StringWriter();</span><br><span class="line">t.printStackTrace(<span class="keyword">new</span> PrintWriter(out));</span><br></pre></td></tr></table></figure><p>更灵活的是使用StackWalker类，它会生成一个StackWalker.StackFrame实例流，每个实例分别描述一个堆栈，可以调用迭代处理这些堆栈。</p><h2 id="断言–跳"><a href="#断言–跳" class="headerlink" title="断言–跳"></a>断言–跳</h2><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger）并调用其info方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.getGlobal().info(<span class="string">&quot;File -&gt; open menu item selected&quot;</span>);</span><br></pre></td></tr></table></figure><p>默认情况下将会打印“File -&gt; open menu item selected”</p><p>但是，如在适当的地方（如main的最前面）调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logger.getGlobal().setLevel(Level.OFF);</span><br></pre></td></tr></table></figure><p>将会取消所有日志</p><p>通常，有7个日志级别</p><ol><li>SEVERE</li><li>WARNING</li><li>INFO</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST</li></ol><p>默认只记录前三个级别，可通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.setLevel(Level.FINE);</span><br></pre></td></tr></table></figure><h3 id="修改日志管理器配置"><a href="#修改日志管理器配置" class="headerlink" title="修改日志管理器配置"></a>修改日志管理器配置</h3><p>java9前，位于jre/lib/logging.properties</p><p>之后在,conf/logging.properties</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数式接口有多个抽象方法却不报错的原因</title>
      <link href="/2021/07/22/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E5%8D%B4%E4%B8%8D%E6%8A%A5%E9%94%99%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2021/07/22/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E5%8D%B4%E4%B8%8D%E6%8A%A5%E9%94%99%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<p>函数式接口有多个抽象方法却不报错的原因<br>比如在Consumer接口中，如图</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210722233754.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="在这里插入图片描述"></p><p>在以下几种情况下，接口不会把其当作是抽象方法，从而符合函数式接口的定义。</p><ul><li>所接口中所定义的方法式默认方法，使用default修饰，有其默认实现。</li><li>方法是静态方法，因为静态方法不能是抽象方法，而是一个已经实现了的方法。</li><li>方法是继承来自 Object 类的public方法，因为任何一个接口或类都继承了 Object 的方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义通用toString方法</title>
      <link href="/2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8toString%E6%96%B9%E6%B3%95/"/>
      <url>/2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8toString%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义toString"><a href="#自定义toString" class="headerlink" title="自定义toString"></a>自定义toString</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.AccessibleObject;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通用toString</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021年07月20日 22:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnalyzer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Object&gt; visited = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (visited.contains(obj)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;....&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited.add(obj);</span><br><span class="line">        Class&lt;?&gt; cl = obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cl == String.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (String) obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">            String r = cl.getComponentType() + <span class="string">&quot;[]&#123;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.getLength(obj); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    r += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Object val = Array.get(obj, i);</span><br><span class="line">                <span class="comment">//是否为基本类型</span></span><br><span class="line">                <span class="keyword">if</span> (cl.getComponentType().isPrimitive()) &#123;</span><br><span class="line">                    r += val;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    r += toString(val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String r = cl.getName();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            r += <span class="string">&quot;[&quot;</span>;</span><br><span class="line">            Field[] fields = cl.getDeclaredFields();</span><br><span class="line">            AccessibleObject.setAccessible(fields, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!r.endsWith(<span class="string">&quot;[&quot;</span>)) &#123;</span><br><span class="line">                        r += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    r += field.getName() + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">                    Class&lt;?&gt; t = field.getType();</span><br><span class="line">                    Object val = field.get(obj);</span><br><span class="line">                    <span class="keyword">if</span> (t.isPrimitive()) &#123;</span><br><span class="line">                        r += val;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        r += toString(val);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            r += <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            cl = cl.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cl != <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021年07月20日 22:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnalyzerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        ObjectAnalyzer objectAnalyzer = <span class="keyword">new</span> ObjectAnalyzer();</span><br><span class="line">        System.out.println(objectAnalyzer.toString(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc-hello</title>
      <link href="/2021/07/14/springmvc-hello/"/>
      <url>/2021/07/14/springmvc-hello/</url>
      
        <content type="html"><![CDATA[<h3 id="配置tomcat，修改idea控制台乱码"><a href="#配置tomcat，修改idea控制台乱码" class="headerlink" title="配置tomcat，修改idea控制台乱码"></a>配置tomcat，修改idea控制台乱码</h3><ol><li><code>首先要分清是tomcat日志编码，与idea的日志显示控制台编码</code></li><li><code>tomcat日志编码：cmd内 &quot;cd /d tomcat根目录&quot; &quot;bin\catalina.bat run&quot; 运行，&quot;chcp65001&quot;切换cmd为utf8，&quot;chcp 936&quot;切换cmd为gbk，确定tomcat日志编码，一般因为tomcat/conf/logging.properties java.util.logging.ConsoleHandler.encoding = UTF-8已设置为utf8</code></li><li><code>idea显示编码：windows默认用gbk所以idea显示默认为gbk编码，【一定】在 Help-- custom vm options 添加-Dfile.encoding=UTF-8，强制为utf8编码显示，不要自己改.vmoptions可能位置不对，idea会在用户目录复制一个</code></li><li><code>【切忌】自己改tomcat的logging.properties 为GBk 会导致调试时get/post参数乱码</code></li></ol><h3 id="web-xml的配置"><a href="#web-xml的配置" class="headerlink" title="web.xml的配置"></a>web.xml的配置</h3><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714220033.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            springmvc配置文件的属性--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            指定springmvc配置文件位置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        服务器启动时创建对象，值越小优先级越高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210717113535.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210717113528425"></p><h3 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    包扫描路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yts.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    视图解析器，拼装链接的前后--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yts.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">myfirstrequst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea创建Maven web.xml版本修改</title>
      <link href="/2021/07/13/Idea%E5%88%9B%E5%BB%BAMaven-web-xml%E7%89%88%E6%9C%AC%E4%BF%AE%E6%94%B9/"/>
      <url>/2021/07/13/Idea%E5%88%9B%E5%BB%BAMaven-web-xml%E7%89%88%E6%9C%AC%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>一、问题描述<br>1.在使用Maven创建web工程的时候发现默认web.xml版本居然是2.4的，这个版本连EL表达式都用不了，所以很是糟心</p><p>2.所以为了解决Idea创建Maven Web工程的web.xml版本问题，给大家提供了两种解决办法</p><p>二、问题分析<br>1.首次创建Maven工程，会联网下载web有关的jar包，其中最重要的一个就是我们创建工程的时候选择的maven-archetype-webapp-1.3.jar这个jar包</p><p>2.在IdeanMaven web项目中生成的web.xml文件就是从该jar包中拷贝出来的，所以我们要做的就是改动web.xml和此jar包</p><p>三、问题解决<br>3.1 暂时解决<br>1.暂时解决方法只能解决当前项目，新建一个项目还会出现这个问题</p><p>2.要做的就是将项目的web.xml头换成需要的版本，比如我换成4.0版本</p><p>将需要的版本头替换原来的2.4版本头</p><p>需要4.0头的可以直接在这里复制<br><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code><br>一、问题描述<br>1.在使用Maven创建web工程的时候发现默认web.xml版本居然是2.4的，这个版本连EL表达式都用不了，所以很是糟心</p><p>2.所以为了解决Idea创建Maven Web工程的web.xml版本问题，给大家提供了两种解决办法</p><p>二、问题分析<br>1.首次创建Maven工程，会联网下载web有关的jar包，其中最重要的一个就是我们创建工程的时候选择的maven-archetype-webapp-1.3.jar这个jar包</p><p>2.在IdeanMaven web项目中生成的web.xml文件就是从该jar包中拷贝出来的，所以我们要做的就是改动web.xml和此jar包</p><p>三、问题解决<br>3.1 暂时解决<br>1.暂时解决方法只能解决当前项目，新建一个项目还会出现这个问题</p><p>2.要做的就是将项目的web.xml头换成需要的版本，比如我换成4.0版本</p><p>将需要的版本头替换原来的2.4版本头</p><p>需要4.0头的可以直接在这里复制<br><code>&lt;?xm</code>l version=”1.0” encoding=”UTF-8”?&gt;<code> </code><web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"         version="4.0">`</p><p></web-app>`</p><p>3.不建议随便粘贴一个头替换原来的web.xml头，最好是根据自己的服务器如Tomcat的版本来替换，推荐从Tomcat服务器中的web.xml中把头部分粘贴过来进行替换或者直接将web.xml文件拷贝过来替换为原来的web.xml，图示</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233506.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><p>在Tomcat安装目录下的webapp/ROOT/WEB-INF中有我们需要的web.xml</p><p>把不需要的部分删除，就可以得到我们需要的部分，也可以不删除，没什么影响<br><code>&lt;?xm</code>l version=”1.0” encoding=”UTF-8”?&gt;<code> </code><web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"         version="4.0">`</p><p></web-app>`<br>4.重启Idea 的服务器，如Tomcat，问题解决</p><p>3.2 永久解决<br>1.上述方法只能解决一个项目问题，但是我们并不想每次创建web项目都要像上面一样，很麻烦，所以我们这里永久性解决</p><p>2.我们创建web项目的时候发现使用:分隔了一个路径和jar包名称，前者其实就是Maven仓库坐标，后者就是web项目核心jar包</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233512.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><p>3.根据提供的坐标（路径）找到maven-archetype-webapp这个jar包</p><p>我的路径：d:\maven\MavenRepository.m2\repository\org\apache\maven\archetypes\maven-archetype-webapp\1.3\</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233514.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><p>4.我们使用压缩软件打开这个jar包，注意是打开而不是解压，如使用2345好压打开，依次进入以下路径到WEB-INF目录中就可以看到有一个web.xml文件</p><p>选择打开</p><p>依次进入maven-archetype-webapp-1.3.jar\archetype-resources\src\main\webapp\WEB-INF目录中，找到web.xml</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233517.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233519.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><p>5.双击打开，注意不是解压！将此web.xml的头内容替换为我们需要的头信息（也可以直接删除这个web.xml，然后直接从Tomcat安装目录下的webapp/ROOT/WEB-INF中将web.xml给复制过来替换原来的web.xml），两种方式都行</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233522.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></p><p>6.修改完成，保存，然后关闭打开的文件，这个时候压缩软件会提示信息已经改变，是否重新压缩，选择是，修改完成</p><p>7.重新创建web工程，出现的web.xml就是我们刚刚修改的web.xml</p>]]></content>
      
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8常用API</title>
      <link href="/2021/06/18/Java8%E5%B8%B8%E7%94%A8API/"/>
      <url>/2021/06/18/Java8%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h1 id="📘-Lambda表达式"><a href="#📘-Lambda表达式" class="headerlink" title="📘 Lambda表达式"></a>📘 Lambda表达式</h1><h2 id="1-Lambda-表达式演示"><a href="#1-Lambda-表达式演示" class="headerlink" title="1. Lambda 表达式演示"></a>1. Lambda 表达式演示</h2><h6 id="一般的匿名类"><a href="#一般的匿名类" class="headerlink" title="一般的匿名类:"></a><em>一般的匿名类:</em></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Runnable匿名内部类</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bbb&quot;</span>);    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(runnable).start();</span><br></pre></td></tr></table></figure><p><em>lambda表达式：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *第一种：声明一个父类接口，初始化该接口的匿名实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Runnable r1=()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//线程任务对象包装成线程对象。</span></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(r1);</span><br><span class="line"><span class="comment">//启动线程。</span></span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *第二种：无需声明，直接使用匿名内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//线程任务对象包装成线程对象。</span></span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//启动线程。</span></span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *两种方式的区别在于你是否需要重复使用该接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="2-理解Lambda步骤："><a href="#2-理解Lambda步骤：" class="headerlink" title="2. 理解Lambda步骤："></a>2. 理解Lambda步骤：</h2><h3 id="2-1：函数式接口"><a href="#2-1：函数式接口" class="headerlink" title="2.1：函数式接口"></a>2.1：<strong>函数式接口</strong></h3><p><strong>lambda的前置条件：</strong>必须是函数式接口，才可以用lamnda表达式。</p><h3 id="2-2：语法格式"><a href="#2-2：语法格式" class="headerlink" title="2.2：语法格式"></a>2.2：<strong>语法格式</strong></h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(参数列表) -&gt; &#123;</span><br><span class="line">    Lambda体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“参数列表”详细语法"><a href="#“参数列表”详细语法" class="headerlink" title="“参数列表”详细语法"></a>“参数列表”详细语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *无参，小括号()必写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *有一个参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Consumer&lt;String&gt; con = (x) -&gt; &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一个参数时，参数列表的括号“()”可以省略不写，直接写参数列表</span></span><br><span class="line">Consumer&lt;String&gt; con = x -&gt; &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *有多个参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="“Lambda体”详细语法"><a href="#“Lambda体”详细语法" class="headerlink" title="“Lambda体”详细语法"></a>“Lambda体”详细语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体只有一行，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Lambda体只有一行时，也可以省略“&#123;&#125;”符号</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体有多行，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体只有一行，而且有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//这种情况下，可以同时省略“return”关键字 和 “&#123;&#125;”符号</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  Integer.compare(x, y));</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Lambda体有多行，而且有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-拓展：Lambda表达式中的类型推断"><a href="#3-拓展：Lambda表达式中的类型推断" class="headerlink" title="3. 拓展：Lambda表达式中的类型推断"></a>3. 拓展：Lambda表达式中的类型推断</h2><p>Lambda 表达式的参数列表实质上是带有参数类型的，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((Integer x,Integer y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下"><a href="#但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下" class="headerlink" title="但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下"></a>但是因为JVM编译器通过上下文推断出数据类型（即“类型推断”），所以我们可以省略参数类型不写。实际上我们在书写Lambda表达式时都是不写参数类型的。如下</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TreeSet&lt;Integer&gt;((x,y) -&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-Lambda表达式特征总结"><a href="#4-Lambda表达式特征总结" class="headerlink" title="4. Lambda表达式特征总结"></a>4. Lambda表达式特征总结</h2><ol><li>不用声明参数类型，编译器可统一识别参数值。</li><li>一个参数不用定义圆括号, 多个参数则需要圆括号。</li><li>方法体里只包含一个语句，不需要使用大括号。</li><li>如果方法体只有一个表达式返回值则编译器会自动返回值，而大括号需指定表达式返回了一个数值。</li></ol><h1 id="📘-函数式接口"><a href="#📘-函数式接口" class="headerlink" title="📘 函数式接口"></a>📘 函数式接口</h1><h2 id="一、函数式接口特征："><a href="#一、函数式接口特征：" class="headerlink" title="一、函数式接口特征："></a><strong>一、函数式接口特征：</strong></h2><p>接口中有且仅有一个抽象方法。（但是可以有多个非抽象方法，如静态方法和默认方法）</p><h2 id="二、-四大内置核心函数式接口"><a href="#二、-四大内置核心函数式接口" class="headerlink" title="二、 四大内置核心函数式接口"></a>二、 四大内置核心函数式接口</h2><table><thead><tr><th></th><th>接口</th><th>抽象方法</th></tr></thead><tbody><tr><td>消费型接口（有一个参数且无返回值）</td><td>Consumer<T></td><td>void accept(T t)</td></tr><tr><td>供给型接口（无参且有返回值）</td><td>Supplier<T></td><td>T get( )</td></tr><tr><td>函数型接口（有一个参数且有返回值）</td><td>Function&lt;T,R&gt;</td><td>R apply(T t)</td></tr><tr><td>断言型接口（有参且返回布尔值）</td><td>Predicate<T></td><td>boolean test(T t)</td></tr></tbody></table><p><em>注：这四个函数式接口基本囊括了业务中90%的技术需求。但如果遇到这四个接口无法解决的技术需求，实际上在 java.lang.funtion 包中还有非常多的函数式接口供使用。这些接口大部分继承了四大核心函数式接口或继承了四大核心函数式接口的思想。以下举了一些例子，更多可以自己了解：</em></p><table><thead><tr><th></th><th>接口</th><th>抽象方法</th></tr></thead><tbody><tr><td>与消费型接口Consumer类似（有两个参数且无返回值）</td><td>BiConsumer&lt;T,U&gt;</td><td>void accept(T t, U u)</td></tr><tr><td>与函数型接口Function类似（有两个参数且有返回值）</td><td>BiFunction&lt;T,U,R&gt;</td><td>R apply(T t, U u)</td></tr><tr><td>与断言型接口Predicate类似（有两个参数且返回布尔值）</td><td>BiPredicate&lt;T, U&gt;</td><td>boolean test(T t, U u)</td></tr></tbody></table><h2 id="拓展、-FunctionalInterface注解"><a href="#拓展、-FunctionalInterface注解" class="headerlink" title="拓展、@FunctionalInterface注解"></a>拓展、@<strong>FunctionalInterface注解</strong></h2><h6 id="FunctionalInterface-注解用于表示一个接口为函数式接口。"><a href="#FunctionalInterface-注解用于表示一个接口为函数式接口。" class="headerlink" title="@FunctionalInterface 注解用于表示一个接口为函数式接口。"></a>@FunctionalInterface 注解用于表示一个接口为函数式接口。</h6><p>同时，我们也可以使用@FunctionalInterface注解来检查某个接口是否为函数式接口：如果使用了@FunctionalInterface注解，接口中的抽象方法只允许有一个。</p><h1 id="📘-Stream-API"><a href="#📘-Stream-API" class="headerlink" title="📘 Stream API"></a>📘 Stream API</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>​    Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，<strong>就类似于使用 SQL 执行的数据库查询</strong>。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><h2 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h2><p>定义一个员工类，用于实例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> salary, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get、set方法；重写toString方法；重写equals方法；重写hashCode方法；</span></span><br><span class="line">    <span class="comment">//以上方法为了省略篇幅，所以没有贴出</span></span><br></pre></td></tr></table></figure><p>定义一个Stream测试类，用于初始化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employees employees1 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        Employees employees2 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黑&quot;</span>,<span class="number">12</span>,<span class="number">3000</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        Employees employees3 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黄&quot;</span>,<span class="number">13</span>,<span class="number">4000</span>,<span class="string">&quot;汕头&quot;</span>);</span><br><span class="line">        Employees employees4 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees5 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees6 = <span class="keyword">new</span> Employees(<span class="string">&quot;小肖&quot;</span>,<span class="number">14</span>,<span class="number">6000</span>,<span class="string">&quot;黑龙江&quot;</span>);</span><br><span class="line">        Employees employees7 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Employees&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(employees1);</span><br><span class="line">        list.add(employees2);</span><br><span class="line">        list.add(employees3);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees6);</span><br><span class="line">        list.add(employees7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、操作分类"><a href="#3、操作分类" class="headerlink" title="3、操作分类"></a>3、操作分类</h2><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233536.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image"></p><ul><li>无状态：指元素的处理不受之前元素的影响；</li><li>有状态：指该操作只有拿到所有元素之后才能继续下去。</li><li>非短路操作：指必须处理所有元素才能得到最终结果；</li><li>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 A || B，只要A为true，则无需判断B的结果。</li></ul><h3 id="3-2-中间操作"><a href="#3-2-中间操作" class="headerlink" title="3.2 中间操作"></a>3.2 中间操作</h3><h2 id="📘-Stream——中间操作"><a href="#📘-Stream——中间操作" class="headerlink" title="📘 Stream——中间操作"></a>📘 Stream——中间操作</h2><h6 id="沿用-Stream-API-中的测试类和数据。"><a href="#沿用-Stream-API-中的测试类和数据。" class="headerlink" title="沿用 Stream API 中的测试类和数据。"></a>沿用 <a href="https://www.yuque.com/eae60m/iwgwlq/cagtia">Stream API</a> 中的测试类和数据。</h6><p>定义一个员工类，用于实例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> salary, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get、set方法；重写toString方法；重写equals方法；重写hashCode方法；</span></span><br><span class="line">    <span class="comment">//以上方法为了省略篇幅，所以没有贴出</span></span><br></pre></td></tr></table></figure><p>定义一个Stream测试类，用于初始化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employees employees1 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        Employees employees2 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黑&quot;</span>,<span class="number">12</span>,<span class="number">3000</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        Employees employees3 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黄&quot;</span>,<span class="number">13</span>,<span class="number">4000</span>,<span class="string">&quot;汕头&quot;</span>);</span><br><span class="line">        Employees employees4 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees5 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees6 = <span class="keyword">new</span> Employees(<span class="string">&quot;小肖&quot;</span>,<span class="number">14</span>,<span class="number">6000</span>,<span class="string">&quot;黑龙江&quot;</span>);</span><br><span class="line">        Employees employees7 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Employees&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(employees1);</span><br><span class="line">        list.add(employees2);</span><br><span class="line">        list.add(employees3);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees6);</span><br><span class="line">        list.add(employees7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-筛选与切片"><a href="#1-筛选与切片" class="headerlink" title="1. 筛选与切片"></a>1. 筛选与切片</h3><h3 id="1-1-过滤-filter"><a href="#1-1-过滤-filter" class="headerlink" title="1.1 过滤 filter"></a>1.1 过滤 filter</h3><p>通过一个断言，排除某些元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//过滤出年龄大于13的Employees</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .filter(emp -&gt; emp.getAge() &gt; <span class="number">13</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1-2-去重-distinct"><a href="#1-2-去重-distinct" class="headerlink" title="1.2 去重 distinct"></a>1.2 去重 distinct</h3><p>distinct 是同时依赖于 equals 方法和 hashCode 方法的，其中一个方法没有正确重写都不会去重成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//去重</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="1-3-截断-limit"><a href="#1-3-截断-limit" class="headerlink" title="1.3 截断 limit"></a>1.3 截断 limit</h3><p>使元素不超过指定数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//截断</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .limit(<span class="number">3</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="1-4-跳过-skip"><a href="#1-4-跳过-skip" class="headerlink" title="1.4 跳过 skip"></a>1.4 跳过 skip</h3><p>去除前n个元素。如果流中元素不足n个，则返回一个空流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//跳过</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .skip(<span class="number">3</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="2-映射"><a href="#2-映射" class="headerlink" title="2. 映射"></a>2. 映射</h3><h3 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h3><p>对流中的每一个元素都进行同一个指定操作，操作结束后最终返回一个新的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//映射</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .map(emp -&gt; emp.getAddress())</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">东莞</span><br><span class="line">深圳</span><br><span class="line">汕头</span><br><span class="line">北京</span><br><span class="line">北京</span><br><span class="line">黑龙江</span><br><span class="line">东莞</span><br></pre></td></tr></table></figure><h3 id="2-2-mapToDouble"><a href="#2-2-mapToDouble" class="headerlink" title="2.2 mapToDouble"></a>2.2 mapToDouble</h3><p>与 map 类似，但是返回类型必须是 Double 型。</p><h3 id="2-3-mapToInt"><a href="#2-3-mapToInt" class="headerlink" title="2.3 mapToInt"></a>2.3 mapToInt</h3><p>与 map 类似，但是返回类型必须是 Int 型。</p><h3 id="2-4-mapToLong"><a href="#2-4-mapToLong" class="headerlink" title="2.4 mapToLong"></a>2.4 mapToLong</h3><p>与 map 类似，但是返回类型必须是 Long 型。</p><h3 id="2-5-flatMap"><a href="#2-5-flatMap" class="headerlink" title="2.5 flatMap"></a>2.5 flatMap</h3><p>将流中的每个值都换成另一个流，然后把所有流连接成一个流。</p><p>这个不太好演示且使用率不太高，可自行搜索</p><h3 id="3-排序"><a href="#3-排序" class="headerlink" title="3. 排序"></a>3. 排序</h3><h3 id="3-1-sorted"><a href="#3-1-sorted" class="headerlink" title="3.1 sorted"></a>3.1 sorted</h3><p>将流中元素按指定顺序（自然排序或者定制排序）排序</p><p>如果是自然排序，则必须实现Comparable接口，如果没有实现会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//自然排序（演示自然排序时为Employees类实现了Comparable接口，实现为按照年龄升序排序）</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .sorted()</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定制排序，使用Comparator匿名类，实现为按照工资升序排序</span></span><br><span class="line">    list.stream()</span><br><span class="line">        .sorted((emp1,emp2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> salary1 = emp1.getSalary();</span><br><span class="line">            <span class="keyword">int</span> salary2 = emp2.getSalary();</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(salary1, salary2);</span><br><span class="line">        &#125;)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]    </span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id="3-3-终止操作"><a href="#3-3-终止操作" class="headerlink" title="3.3 终止操作"></a>3.3 终止操作</h3><h2 id="📘-Stream——终止操作"><a href="#📘-Stream——终止操作" class="headerlink" title="📘 Stream——终止操作"></a>📘 Stream——终止操作</h2><h6 id="📘-沿用-Stream-API-中的测试类和数据。"><a href="#📘-沿用-Stream-API-中的测试类和数据。" class="headerlink" title="📘 沿用 Stream API 中的测试类和数据。"></a>📘 沿用 <a href="https://www.yuque.com/eae60m/iwgwlq/cagtia">Stream API</a> 中的测试类和数据。</h6><p>定义一个员工类，用于实例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> salary, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get、set方法；重写toString方法；重写equals方法；重写hashCode方法；</span></span><br><span class="line">    <span class="comment">//以上方法为了省略篇幅，所以没有贴出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Stream测试类，用于初始化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employees employees1 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        Employees employees2 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黑&quot;</span>,<span class="number">12</span>,<span class="number">3000</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        Employees employees3 = <span class="keyword">new</span> Employees(<span class="string">&quot;小黄&quot;</span>,<span class="number">13</span>,<span class="number">4000</span>,<span class="string">&quot;汕头&quot;</span>);</span><br><span class="line">        Employees employees4 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees5 = <span class="keyword">new</span> Employees(<span class="string">&quot;小郭&quot;</span>,<span class="number">14</span>,<span class="number">5000</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        Employees employees6 = <span class="keyword">new</span> Employees(<span class="string">&quot;小肖&quot;</span>,<span class="number">14</span>,<span class="number">6000</span>,<span class="string">&quot;黑龙江&quot;</span>);</span><br><span class="line">        Employees employees7 = <span class="keyword">new</span> Employees(<span class="string">&quot;小明&quot;</span>,<span class="number">11</span>,<span class="number">2000</span>,<span class="string">&quot;东莞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Employees&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(employees1);</span><br><span class="line">        list.add(employees2);</span><br><span class="line">        list.add(employees3);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees4);</span><br><span class="line">        list.add(employees6);</span><br><span class="line">        list.add(employees7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-查找与匹配"><a href="#1-查找与匹配" class="headerlink" title="1. 查找与匹配"></a>1. 查找与匹配</h3><h3 id="1-1-是否所有元素匹配指定条件-allMatch"><a href="#1-1-是否所有元素匹配指定条件-allMatch" class="headerlink" title="1.1 是否所有元素匹配指定条件 allMatch"></a>1.1 是否所有元素匹配指定条件 allMatch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//判断是否所有元素的地址都是北京</span></span><br><span class="line">    <span class="keyword">boolean</span> allMatch = list.stream()</span><br><span class="line">        .allMatch(emp -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;北京&quot;</span>.equals(emp.getAddress());</span><br><span class="line">        &#125;);</span><br><span class="line">    System.out.println(allMatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="1-2-是否至少一个元素匹配指定条件-anyMatch"><a href="#1-2-是否至少一个元素匹配指定条件-anyMatch" class="headerlink" title="1.2 是否至少一个元素匹配指定条件 anyMatch"></a>1.2 是否至少一个元素匹配指定条件 anyMatch</h3><p>与 allMatch 类似，可参考 allMatch</p><h3 id="1-3-是否所有元素都不匹配指定条件-noneMatch"><a href="#1-3-是否所有元素都不匹配指定条件-noneMatch" class="headerlink" title="1.3 是否所有元素都不匹配指定条件 noneMatch"></a>1.3 是否所有元素都不匹配指定条件 noneMatch</h3><p>与 allMatch 类似，可参考 allMatch</p><h3 id="1-4-获取第一个元素-findFirst"><a href="#1-4-获取第一个元素-findFirst" class="headerlink" title="1.4 获取第一个元素 findFirst"></a>1.4 获取第一个元素 findFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Optional&lt;Employees&gt; findFirst = list.stream().findFirst();</span><br><span class="line">    Employees employees = findFirst.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="1-5-获取一个随机元素-findAny"><a href="#1-5-获取一个随机元素-findAny" class="headerlink" title="1.5 获取一个随机元素 findAny"></a>1.5 获取一个随机元素 findAny</h3><h6 id="findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。"><a href="#findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。" class="headerlink" title="findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。"></a>findAny方法在并行流跟串行流上是有区别的。串行流是单线程，先找到哪个元素就会返回哪个元素，所以一般都是返回第一个元素；而并行流是多个线程的，哪个线程先找到元素就返回该线程的元素。</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Optional&lt;Employees&gt; findFirst = list.parallelStream().findAny();</span><br><span class="line">    Employees employees = findFirst.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br></pre></td></tr></table></figure><h3 id="1-6-获取总个数-count"><a href="#1-6-获取总个数-count" class="headerlink" title="1.6 获取总个数 count"></a>1.6 获取总个数 count</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">long</span> count = list.stream().count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="1-7-获取最大值-max"><a href="#1-7-获取最大值-max" class="headerlink" title="1.7 获取最大值 max"></a>1.7 获取最大值 max</h3><p>需要指定一个比较器Comparator，程序使用该比较器的规则来获取最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//查找工资最大的Employees</span></span><br><span class="line">    Optional&lt;Employees&gt; max = list.stream().max((emp1,emp2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> salary1 = emp1.getSalary();</span><br><span class="line">        <span class="keyword">int</span> salary2 = emp2.getSalary();</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(salary1, salary2);</span><br><span class="line">    &#125;);</span><br><span class="line">    Employees employees = max.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br></pre></td></tr></table></figure><h3 id="1-8-获取最小值-min"><a href="#1-8-获取最小值-min" class="headerlink" title="1.8 获取最小值 min"></a>1.8 获取最小值 min</h3><p>需要指定一个比较器Comparator，程序使用该比较器的规则来获取最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//查找年龄最小的Employees</span></span><br><span class="line">    Optional&lt;Employees&gt; min = list.stream().min((emp1,emp2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> age1 = emp1.getAge();</span><br><span class="line">        <span class="keyword">int</span> age2 = emp2.getAge();</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(age1, age2);</span><br><span class="line">    &#125;);</span><br><span class="line">    Employees employees = min.get();</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="2-归约"><a href="#2-归约" class="headerlink" title="2. 归约"></a>2. 归约</h3><h3 id="2-1-reduce"><a href="#2-1-reduce" class="headerlink" title="2.1 reduce"></a>2.1 reduce</h3><p>将流中所有元素或者所有元素的某个属性值反复组合起来，最终得到一个值</p><p>在执行第一遍操作时，是将指第一个元素作为 x ，第二个元素作为 y 相组合。在执行第一遍以后的操作时，是将第一遍操作的结果作为 x ，上一次操作后面的下一个元素作为 y 相组合。直到所有元素组合完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//求所有工资总和（先用map取出所有工资，再用reduce相加）</span></span><br><span class="line">    Optional&lt;Integer&gt; reduce = list.stream()</span><br><span class="line">        .map(emp -&gt; emp.getSalary())</span><br><span class="line">        .reduce((sal1,sal2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> sal1 + sal2;</span><br><span class="line">        &#125;);</span><br><span class="line">    Integer total = reduce.get();</span><br><span class="line">    System.out.println(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><p>也可以指定初始值。那么在执行第一遍操作时是将指定的初始值作为 x 与流中的第一个元素作为 y 相组合。</p><p>这样子也能更好地避免空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//求所有工资总和（先用map取出所有工资，再用reduce相加(同时指定初始值为0)）</span></span><br><span class="line">    Integer total = list.stream()</span><br><span class="line">            .map(emp -&gt; emp.getSalary())</span><br><span class="line">            .reduce(<span class="number">0</span>, (sal1,sal2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> sal1 + sal2;</span><br><span class="line">        &#125;);</span><br><span class="line">    System.out.println(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br></pre></td></tr></table></figure><h3 id="3-收集"><a href="#3-收集" class="headerlink" title="3. 收集"></a>3. 收集</h3><h3 id="3-1-collect"><a href="#3-1-collect" class="headerlink" title="3.1 collect"></a>3.1 collect</h3><p>将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法。</p><p>而且一般情况下我们不需要真的去实现 Collector 接口，已经有一个工具类 Collectors 提供了大量的 API</p><p>Collectors 工具类可自己去做了解，里面的 API 非常多，能完成非常多的需求，功能强大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//汇总为set</span></span><br><span class="line">    Set&lt;Employees&gt; set = list.stream().collect(Collectors.toSet());</span><br><span class="line">    set.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">========================输出结果============================</span><br><span class="line">Employees [name=小黑, age=<span class="number">12</span>, salary=<span class="number">3000</span>, address=深圳]</span><br><span class="line">Employees [name=小明, age=<span class="number">11</span>, salary=<span class="number">2000</span>, address=东莞]</span><br><span class="line">Employees [name=小肖, age=<span class="number">14</span>, salary=<span class="number">6000</span>, address=黑龙江]</span><br><span class="line">Employees [name=小黄, age=<span class="number">13</span>, salary=<span class="number">4000</span>, address=汕头]</span><br><span class="line">Employees [name=小郭, age=<span class="number">14</span>, salary=<span class="number">5000</span>, address=北京]</span><br></pre></td></tr></table></figure><h3 id="4-内部迭代"><a href="#4-内部迭代" class="headerlink" title="4. 内部迭代"></a>4. 内部迭代</h3><h3 id="4-1-forEach"><a href="#4-1-forEach" class="headerlink" title="4.1 forEach"></a>4.1 forEach</h3><p>太简单了不写了，就和for循环差不多的</p><h1 id="📘-Optional"><a href="#📘-Optional" class="headerlink" title="📘 Optional"></a>📘 Optional</h1><p>java . util. Optional 是在 Java 8 中引入，用于解决空指针异常的一个工具。</p><p>它更像是一个容器类，用于代表一个值存在或者不存在。在 JDK 8 以前，用 null 值来表示一个值不存在。现在使用 Optional 可以更好的表达这个概念。</p><h2 id="创建-Optional-实例"><a href="#创建-Optional-实例" class="headerlink" title="创建 Optional 实例"></a>创建 Optional 实例</h2><h3 id="Optional-of-T-value"><a href="#Optional-of-T-value" class="headerlink" title="Optional.of(T value)"></a>Optional.of(T value)</h3><p>用于创建一个 Optioal 的类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：创建一个 Option 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:17:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.of(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是需要注意的是，<strong>Optional 类虽然是 Java 8 中用于避免空指针的工具类，但是它的 of 方法不能接收一个 null</strong>；所以在实际使用中，使用 of 方法构造 Optional 类的实例的时候，需要避免从其他地方传来的用于构造 Optiaonal 实例的值是 null；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：使用 null 构造 Optional 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:23:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.of(<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//会产生 java.lang.NullPointerException 异常。</span></span><br><span class="line">&#125;java</span><br></pre></td></tr></table></figure><p>但是这仍然极大的提高了 debug 空指针异常的错误。在 JDK 8 以前发生空指针的时候不知道是哪一步发生了空指针；现在如果使用 Optional 类，那么极大可能是在 of 方法中发生空指针。</p><h3 id="Optional-empty"><a href="#Optional-empty" class="headerlink" title="Optional.empty()"></a>Optional.empty()</h3><p>创建一个空的 Optional 的类的实例，用于补充 of 方法的参数值为 null 的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：创建一个空的 Option 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:39:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建,此时 op 中是没有值的</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-ofNullable-T-value"><a href="#Optional-ofNullable-T-value" class="headerlink" title="Optional.ofNullable(T value)"></a>Optional.ofNullable(T value)</h3><p>of 方法和 empty 方法的结合体，更优雅，代码阅读性也更好，实际使用推荐此方法。</p><p>若 value 的值不为 null，则调用 of 方法返回一个值为 value 的 Optional 的类的实例；否则调用 empty 方法返回一个空的 Optional 的类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：创建一个 Option 类的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:39:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 底层代码就是使用了一个三元表达式，去判断使用 of 方法还是 empty 方法，如下所示</span></span><br><span class="line"><span class="comment">     * public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123;</span></span><br><span class="line"><span class="comment">     *      return value == null ? empty() : of(value);</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断-Optional-实例是否有值-值是否为空"><a href="#判断-Optional-实例是否有值-值是否为空" class="headerlink" title="判断 Optional 实例是否有值/值是否为空"></a>判断 Optional 实例是否有值/值是否为空</h2><h3 id="Optional-isPresent"><a href="#Optional-isPresent" class="headerlink" title="Optional.isPresent()"></a>Optional.isPresent()</h3><p>用于判断 Optional 实例中包含的值是否null；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：判断 Optional 实例是否有值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">boolean</span> pre_01 = op_01.isPresent();</span><br><span class="line">    <span class="keyword">boolean</span> pre_02 = op_02.isPresent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(pre_01); <span class="comment">//输出 true</span></span><br><span class="line">    System.out.println(pre_02); <span class="comment">//输出 false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理-Option-实例中的值"><a href="#处理-Option-实例中的值" class="headerlink" title="处理 Option 实例中的值"></a>处理 Option 实例中的值</h2><h3 id="Optional-map-Function-mapper"><a href="#Optional-map-Function-mapper" class="headerlink" title="Optional.map(Function mapper)"></a>Optional.map(Function mapper)</h3><p>对 Optional 实例中的值执行指定的操作，操作结束后返回一个包含着新值的新的 Optional 实例。</p><p>如果原来的 Optional 实例的值为空，则不进行操作，仍然返回一个 empty 的 Option 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：处理 Option 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午3:34:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(op_01.hashCode());   <span class="comment">//1450575459</span></span><br><span class="line">    System.out.println(op_02.hashCode());   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理</span></span><br><span class="line">    Optional&lt;String&gt; op_03 = op_01.map(str -&gt; str += <span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_04 = op_02.map(str -&gt; str += <span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">    System.out.println(op_03.hashCode());   <span class="comment">//-1006303071</span></span><br><span class="line">    System.out.println(op_04.hashCode());   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_03.orElse(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">    String str_02 = op_04.orElse(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456abcdefg</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//xyz</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-flatMap-Function-mapper"><a href="#Optional-flatMap-Function-mapper" class="headerlink" title="Optional.flatMap(Function mapper)"></a>Optional.flatMap(Function mapper)</h3><p>与 map 方法类似。</p><p>但是 map 方法中，Function 实现类的返回值不会直接被返回，而是会被再包装一层 Optional 类，即“Function 实现类的返回值” -&gt;“Optional&lt;Function 实现类的返回值&gt;”；</p><p>而在 flatMap 中返回值保持不变，即直接返回 Function 实现类的返回值，但要求 Function 实现类的返回值必须是 Optional 类型，即“Optional&lt;返回值&gt;” -&gt; “Optional&lt;返回值&gt;”。</p><p>这么做的好处是为了避免 map 方法中返回的是一个 Option 类的实例，从而导致调用完 map 方法后得到的返回值是一个 Optional&lt;Optional&lt;真正的值&gt;&gt; 这种嵌套结构的结果。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：处理 Option 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午3:34:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理</span></span><br><span class="line">    Optional&lt;Optional&lt;String&gt;&gt; op_03 = op_01.map(str -&gt; Optional.ofNullable(str));</span><br><span class="line">    Optional&lt;String&gt; op_04 = op_02.flatMap(str -&gt; Optional.ofNullable(str));    <span class="comment">//与 map方法做比较，能看到map方法返回值是一个Optional&lt;Optional&lt;真正的值&gt;&gt;的嵌套结构的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_03.orElse(Optional.ofNullable(<span class="string">&quot;xyz&quot;</span>)).orElse(<span class="string">&quot;xyz&quot;</span>);     <span class="comment">//可以看出在这种嵌套结构的结果上，取值更为麻烦</span></span><br><span class="line">    String str_02 = op_04.orElse(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//xyz</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取-Optional-实例中的值"><a href="#获取-Optional-实例中的值" class="headerlink" title="获取 Optional 实例中的值"></a>获取 Optional 实例中的值</h2><h3 id="Optional-get"><a href="#Optional-get" class="headerlink" title="Optional.get()"></a>Optional.get()</h3><p>直接获取 Optional 实例中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：直接获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str = op.get();</span><br><span class="line">    System.out.println(str);    <span class="comment">//输出 123456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但是需要注意的是，如果 Optional 实例中的值为空，get 方法会抛出 java.util.NoSuchElementException 异常。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：直接获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str = op.get();</span><br><span class="line">    System.out.println(str);    <span class="comment">//抛出异常 java.util.NoSuchElementException</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-orElse-T-other"><a href="#Optional-orElse-T-other" class="headerlink" title="Optional.orElse(T other)"></a>Optional.orElse(T other)</h3><p>get 方法的升级方法，用于避免 get 方法获取 Optional 实例的值时，值为空时抛出异常的情况。</p><p>如果 Optional 实例有值时，则返回 Optional 实例的值；否则返回传入的参数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_01.orElse(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">    String str_02 = op_02.orElse(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//abcdefg</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-orElseGet-Supplier-other"><a href="#Optional-orElseGet-Supplier-other" class="headerlink" title="Optional.orElseGet(Supplier other)"></a>Optional.orElseGet(Supplier other)</h3><p>orElse 方法的升级方法，比起 orElse 方法的固定值，可以更动态的决定当 Optional 实例的值为空时，返回一个什么样的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：获取 Optional 实例中的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DZ_WenYaoHao</span></span><br><span class="line"><span class="comment"> * 2021年3月23日   下午2:55:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个随机数</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="keyword">new</span> Random().nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    Optional&lt;String&gt; op_01 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; op_02 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String str_01 = op_01.orElseGet(() -&gt; i%<span class="number">2</span> == <span class="number">0</span>?<span class="string">&quot;abc&quot;</span>:<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">    String str_02 = op_02.orElseGet(() -&gt; i%<span class="number">2</span> == <span class="number">0</span>?<span class="string">&quot;abc&quot;</span>:<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(str_01); <span class="comment">//123456</span></span><br><span class="line">    System.out.println(str_02); <span class="comment">//abc 或者 xyz，取决于 i 是奇数还是偶数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>easypoi导出</title>
      <link href="/2021/06/18/easypoi%E5%AF%BC%E5%87%BA/"/>
      <url>/2021/06/18/easypoi%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="导出word"><a href="#导出word" class="headerlink" title="导出word"></a>导出word</h3><p>先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 涉密岗位登记导出docx</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vxSecretPersonApply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/downloadSecretRank&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">downloadSecretRank</span><span class="params">(HttpServletRequest request, VxSecretPersonApply vxSecretPersonApply)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> String property = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"> <span class="comment">// Step.1 组装查询条件查询数据</span></span><br><span class="line"> QueryWrapper&lt;VxSecretPersonApply&gt; queryWrapper = QueryGenerator.initQueryWrapper(vxSecretPersonApply, request.getParameterMap());</span><br><span class="line"> LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//Step.2 获取导出数据</span></span><br><span class="line"> List&lt;VxSecretPersonApply&gt; queryList = vxSecretPersonApplyService.list(queryWrapper);</span><br><span class="line"> <span class="comment">// 过滤选中数据</span></span><br><span class="line"> String selections = request.getParameter(<span class="string">&quot;selections&quot;</span>);</span><br><span class="line"> List&lt;VxSecretPersonApply&gt; vxSecretPersonApplyList = <span class="keyword">new</span> ArrayList&lt;VxSecretPersonApply&gt;();</span><br><span class="line"> <span class="keyword">if</span>(oConvertUtils.isEmpty(selections)) &#123;</span><br><span class="line">    vxSecretPersonApplyList = queryList;</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    List&lt;String&gt; selectionList = Arrays.asList(selections.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">    vxSecretPersonApplyList = queryList.stream().filter(item -&gt; selectionList.contains(item.getId())).collect(Collectors.toList());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> List&lt;VxSecretPersonApplyPage&gt; pageList = <span class="keyword">new</span> ArrayList&lt;VxSecretPersonApplyPage&gt;();</span><br><span class="line"> TemplateExportParams params = getTemplateParams(property,<span class="string">&quot;涉密岗位登记表&quot;</span>,<span class="string">&quot;docx&quot;</span>);  <span class="comment">//获取模板</span></span><br><span class="line"> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line"> SecretPersonExportXls secretPersonExportXls = <span class="keyword">new</span> SecretPersonExportXls();</span><br><span class="line"> <span class="comment">//构造数据</span></span><br><span class="line"> map = secretPersonExportXls.getSecretRank(vxSecretPersonApplyList, map, sysBaseAPI,secretJobsService);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Step.4 easyPoi 导出Excel</span></span><br><span class="line"> ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> EasypoiTemplateWordView());</span><br><span class="line"> mv.addObject(TemplateWordConstants.FILE_NAME, <span class="string">&quot;涉密岗位登记表&quot;</span>);</span><br><span class="line"> mv.addObject(TemplateWordConstants.URL,params.getTemplateUrl());</span><br><span class="line"> mv.addObject(TemplateWordConstants.MAP_DATA,map);</span><br><span class="line"> <span class="keyword">return</span> mv;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4.导出</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>java.lang.NoSuchMethodException: org.openxmlformats.schemas.wordprocessingml.x2006.main.impl.CTPictureBaseImpl错误</p><p>使用poi对office文档进行操作的时候,出现以下异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodException: org.openxmlformats.schemas.wordprocessingml.x2006.main.impl.CTPictureBaseImpl.&lt;init&gt;(org.apache.xmlbeans.SchemaType, boolean)</span><br><span class="line">at java.lang.Class.getConstructor0(Unknown Source)</span><br><span class="line">at java.lang.Class.getDeclaredConstructor(Unknown Source)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.getJavaImplConstructor2(SchemaTypeImpl.java:<span class="number">1817</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.createUnattachedSubclass(SchemaTypeImpl.java:<span class="number">1961</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.createUnattachedNode(SchemaTypeImpl.java:<span class="number">1950</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.schema.SchemaTypeImpl.createElementType(SchemaTypeImpl.java:<span class="number">1051</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.values.XmlObjectBase.create_element_user(XmlObjectBase.java:<span class="number">938</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Xobj.getUser(Xobj.java:<span class="number">1675</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cur.getUser(Cur.java:<span class="number">2659</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cur.getObject(Cur.java:<span class="number">2652</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cursor._getObject(Cursor.java:<span class="number">995</span>)</span><br><span class="line">at org.apache.xmlbeans.impl.store.Cursor.getObject(Cursor.java:<span class="number">2904</span>)</span><br><span class="line">at org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:<span class="number">169</span>)</span><br><span class="line">at org.apache.poi.xwpf.usermodel.XWPFDocument.&lt;init&gt;(XWPFDocument.java:<span class="number">119</span>)</span><br><span class="line">at search.utils.POI.readWord(POI.java:<span class="number">169</span>)</span><br><span class="line">at search.service.ThreadManage.executive(ThreadManage.java:<span class="number">115</span>)</span><br><span class="line">at search.service.ThreadManage.run(ThreadManage.java:<span class="number">214</span>)</span><br><span class="line">at java.lang.Thread.run(Unknown Source)</span><br></pre></td></tr></table></figure><p>实际在项目中已经引入poi-ooxml-schemas-3.17.jar这个包，但是却一直报找不到类的异常。然后查poi官网资料(<a href="http://poi.apache.org/faq.html)%E5%BE%97%E7%9F%A5poi%E6%8F%90%E4%BE%9B%E7%9A%84%E9%82%A3%E4%B8%AApoi-ooxml-schemas-3.17.jar%E5%8C%85%E6%98%AF%E7%B2%BE%E7%AE%80%E7%89%88%E7%9A%84%EF%BC%8C%E4%B8%BA%E4%BA%86%E8%8A%82%E7%9C%81%E7%A9%BA%E9%97%B4%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%94%BE%E7%9A%84%E5%8F%AA%E6%9C%89%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A6%81%E5%BC%95%E7%94%A8%E5%8F%A6%E5%A4%96%E4%B8%80%E4%BA%9B%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%9D%E5%B0%B1%E9%9C%80%E8%A6%81%E5%BC%95%E7%94%A8%E5%AE%8C%E6%95%B4%E7%89%88%E7%9A%84ooxml-schemas.jar%E5%8C%85%E3%80%82%E5%8F%A6%E5%A4%96%EF%BC%8CPOI">http://poi.apache.org/faq.html)得知poi提供的那个poi-ooxml-schemas-3.17.jar包是精简版的，为了节省空间，里面放的只有一些常用的模块，所以要引用另外一些功能的话就需要引用完整版的ooxml-schemas.jar包。另外，POI</a> 3.14以上版本对应的完整版的jar包是ooxml-schemas-1.3.jar，这样导入之后果然就好了。 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QueryWrapper常用方法</title>
      <link href="/2021/06/18/mybatis%20plus%20%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8queryWrapper/"/>
      <url>/2021/06/18/mybatis%20plus%20%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8queryWrapper/</url>
      
        <content type="html"><![CDATA[<p>首先奉上mybatis plus的官方文档链接，再看本博客有不清晰的地方，可以查看文档<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p><h3 id="一、queryWrapper是什么"><a href="#一、queryWrapper是什么" class="headerlink" title="一、queryWrapper是什么"></a>一、queryWrapper是什么</h3><p>queryWrapper是mybatis plus中实现查询的对象封装操作类，他的层级关系如下</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233836.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><p>在上面的图片中，</p><p>Wrapper ： 条件构造抽象类，最顶端父类，抽象类中提供4个方法西面贴源码展示<br>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<br>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。<br>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper<br>LambdaUpdateWrapper ： Lambda 更新封装Wrapper<br>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法<br>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</p><h3 id="二、使用demo"><a href="#二、使用demo" class="headerlink" title="二、使用demo"></a>二、使用demo</h3><p>使用的关键的代码<br>QueryWrapper<PbListBlack> sectionQueryWrapper = new QueryWrapper&lt;&gt;();<br>sectionQueryWrapper.eq(“OPTYPE”, 1);<br>sectionQueryWrapper.eq(“BLTYPE”, 1);<br>List<PbListBlack> pbListBlacks = iPbListBlackMapper.selectList(sectionQueryWrapper);<br>上面这段代码的意思就是，首先新建一个QueryWrapper对象，类型为PbListBlack对象，也就是你需要查询的实体数据，</p><p>sectionQueryWrapper.eq(“OPTYPE”, 1);</p><p>sectionQueryWrapper.eq(“BLTYPE”, 1);</p><p>这两句的意思是PbListBlack对象对应的数据库表中的OPTYPE，BLTYPE字段值要为1</p><p>然后调用iPbListBlackMapper.selectList方法，入参就为前面新建好的查询对象封装类</p><p>下面贴上查询实体的代码</p><p>@Data<br>@EqualsAndHashCode(callSuper = false)<br>@Accessors(chain = true)<br>@TableName(“PB_LIST_BLACK”)<br>@ApiModel(value = “PB_LIST_BLACK对象”, description = “”)<br>public class PbListBlack extends Model<PbListBlack> {<br>   @TableField(“ID”)<br>   private Long id;</p><p>   @TableField(“USERID”)<br>   private String userId;<br>   @TableField(“SPGATE”)<br>   private String spgate;<br>   @TableField(“SPNUMBER”)<br>   private String spnumber;<br>   @TableField(“PHONE”)<br>   private Long phone;<br>   @TableField(“OPTYPE”)<br>   private Integer optype;<br>   @TableField(“OPTTIME”)<br>   private Timestamp optTime;<br>   @TableField(“CORPCODE”)<br>   private String corpCode;<br>   @TableField(“SVRTYPE”)<br>   private String svrType;</p><p>   @TableField(“MSG”)<br>   private String msg = “ “;</p><p>   @ApiModelProperty(value = “黑名单类型。1：短信；2：彩信”)<br>   @TableField(“BLTYPE”)<br>   private Integer blType;</p><p>}<br>然后是iPbListBlackMapper的代码‘，代码很简单</p><p>@Repository<br>public interface IPbListBlackMapper extends BaseMapper<PbListBlack> {<br>}<br>仅仅只需要基层BaseMapper接口即可，这样mybatis plus底层封装的方法即可实现帮你查询你设置查询条件查询到的数据</p><p>当你的Mapper 继承BaseMapper接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</p><h3 id="三、QueryWrapper的方法"><a href="#三、QueryWrapper的方法" class="headerlink" title="三、QueryWrapper的方法"></a>三、QueryWrapper的方法</h3><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233857.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif">四、总结<br>上面的博客内容虽然简单，也只展示了一个查询的功能。在你实际使用的时候，可以按照  条件构造器上面包含的的方法，设置你查询数据的条件，调用BaseMapper里相应的方法即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/06/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/06/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h4 id="1-根据目的来分"><a href="#1-根据目的来分" class="headerlink" title="1. 根据目的来分"></a>1. 根据目的来分</h4><p>根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种。</p><ol><li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</li><li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</li><li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</li></ol><h4 id="2-根据作用范围来分"><a href="#2-根据作用范围来分" class="headerlink" title="2. 根据作用范围来分"></a>2. 根据作用范围来分</h4><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。</p><ol><li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。</li><li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。</li></ol><p>表 1 介绍了这 23 种设计模式的分类。</p><table><thead><tr><th>范围\目的</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr><td>类模式</td><td>工厂方法</td><td>(类）适配器</td><td>模板方法、解释器</td></tr><tr><td>对象模式</td><td>单例 原型 抽象工厂 建造者</td><td>代理 (对象）适配器 桥接 装饰 外观 享元 组合</td><td>策略 命令 职责链 状态 观察者 中介者 迭代器 访问者 备忘录</td></tr></tbody></table><h4 id="3-GoF的23种设计模式的功能"><a href="#3-GoF的23种设计模式的功能" class="headerlink" title="3. GoF的23种设计模式的功能"></a>3. GoF的23种设计模式的功能</h4><p>前面说明了 GoF 的 23 种设计模式的分类，现在对各个模式的功能进行介绍。</p><ol><li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li><li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li><li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li><li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li><li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li><li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li><li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li><li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li><li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li><li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li><li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li><li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li><li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li><li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li><li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li><li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li></ol><p>UML（Unified Modeling Language，统一建模语言）是用来设计软件蓝图的可视化建模语言，是一种为面向对象系统的产品进行说明、可视化和编制文档的标准语言，独立于任何一种具体的程序设计语言。</p><p>1997 年 UML 被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>UML 能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。</p><p>UML 具有很宽的应用领域。其中最常用的是建立软件系统的模型，但它同样可以用于描述非软件领域的系统，如机械系统、企业机构或业务过程，以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之，UML 可以对任何具有静态结构和动态行为的系统进行建模，而且使用于从需求规格描述直至系统完成后的测试和维护等系统开发的各个阶段。</p><p>UML 模型大多以图表的方式表现出来，一份典型的建模图表通常包含几个块或框、连接线和作为模型附加信息的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。</p><p>在这里大家可能会疑问，UML 明明是一种图形，为什么说是语言呢？</p><p>语言是包括文字和图形的，有很多内容文字是无法表达的。你见过建筑设计图纸吗？里面还不是很多图形，光用文字能表达清楚建筑设计吗？在建筑界，有一套标准来描述设计，同样道理，在软件开发界，我们也需要一套标准来帮助我们做好软件开发的工作。UML 就是其中的一种标准，注意这可不是唯一标准，只是 UML 是大家比较推崇的一种标准而已。UML 并不是强制性标准，没有规定在软件开发中一定要用 UML，但是我们需要包括 UML 在内的各种标准，来提高我们软件开发的水平。</p><h2 id="基本构件"><a href="#基本构件" class="headerlink" title="基本构件"></a>基本构件</h2><p>UML 建模的核心是模型，模型是现实的简化、真实系统的抽象。UML 提供了系统的设计蓝图。当给软件系统建模时，需要采用通用的符号语言，这种描述模型所使用的语言被称为建模语言。在 UML 中，所有的描述由事物、关系和图这些构件组成。下图完整地描述了所有构件的关系。</p><p><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233327.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="UML基本构件图"></p><p>下面对上图中的构件进行说明。</p><h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><p>事物是抽象化的最终结果，分为结构事物、行为事物、分组事物和注释事物。</p><h4 id="1-结构事物"><a href="#1-结构事物" class="headerlink" title="1. 结构事物"></a>1. 结构事物</h4><p>结构事物是模型中的静态部分，用以呈现概念或实体的表现元素，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>图例</th></tr></thead><tbody><tr><td>类（Class）</td><td>具有相同属性、方法、关系和语义的对象集合</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233336.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>接口（Interface）</td><td>指一个类或构件的一个服务的操作集合，它仅仅定义了一组操作的规范，并没有给出这组操作的具体实现</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233342.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>用例（User Case）</td><td>指对一组动作序列的描述，系统执行这些动作将产生一个对特定的参与者（Actor）有价值且可观察的结果</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233356.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>协作（Collaboration）</td><td>定义元素之间的相互作用</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233353.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>组件（Component）</td><td>描述物理系统的一部分</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233402.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>活动类（Active Class）</td><td>指对象有一个或多个进程或线程。活动类和类很相象，只是它的对象代表的元素的行为和其他元素是同时存在的</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233405.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>节点（Node）</td><td>定义为运行时存在的物理元素</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233410.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><h4 id="2-行为事物"><a href="#2-行为事物" class="headerlink" title="2. 行为事物"></a>2. 行为事物</h4><p>行为事物指 UML 模型中的动态部分，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>用例</th></tr></thead><tbody><tr><td>交互（Interaction）</td><td>包括一组元素之间的消息交换</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233418.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr><tr><td>状态机（State Machine）</td><td>由一系列对象的状态组成</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233421.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><h4 id="3-分组事物"><a href="#3-分组事物" class="headerlink" title="3. 分组事物"></a>3. 分组事物</h4><p>目前只有一种分组事物，即包。包纯碎是概念上的，只存在于开发阶段，结构事物、行为事物甚至分组事物都有可能放在一个包中，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>用例</th></tr></thead><tbody><tr><td>包（Package）</td><td>UML中唯一的组织机制</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233425.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><h4 id="4-注释事物"><a href="#4-注释事物" class="headerlink" title="4. 注释事物"></a>4. 注释事物</h4><p>注释事物是解释 UML 模型元素的部分，如下表所示。</p><table><thead><tr><th>事物</th><th>解释</th><th>用例</th></tr></thead><tbody><tr><td>注释（Note）</td><td>用于解析说明 UML 元素</td><td><img "" class="lazyload placeholder" data-original="https://magickio.oss-cn-shenzhen.aliyuncs.com/img/20210714233452.jpeg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="img"></td></tr></tbody></table><blockquote><p>关于 UML 中的关系，我们在《<a href="http://c.biancheng.net/view/8374.html">UML类图及类图之间的关系</a>》一节讲解。</p></blockquote><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>UML2.0 一共有 13 种图（UML1.5 定义了 9 种，UML2.0 增加了 4 种），分别是类图、对象图、构件图、部署图、活动图、状态图、用例图、时序图、协作图 9 种，以及包图、组合结构图、时间图、交互概览图 4 种。</p><table><thead><tr><th>图名称</th><th>解释</th></tr></thead><tbody><tr><td>类图（Class Diagrams）</td><td>用于定义系统中的类</td></tr><tr><td>对象图（Object Diagrams）</td><td>类图的一个实例，描述了系统在具体时间点上所包含的对象及各个对象之间的关系</td></tr><tr><td>构件图（Component Diagrams）</td><td>一种特殊的 UML 图，描述系统的静态实现视图</td></tr><tr><td>部署图（Deployment Diagrams）</td><td>定义系统中软硬件的物理体系结构</td></tr><tr><td>活动图（Activity Diagrams）</td><td>用来描述满足用例要求所要进行的活动及活动间的约束关系</td></tr><tr><td>状态图（State Chart Diagrams）</td><td>用来描述类的对象的所有可能的状态和时间发生时，状态的转移条件</td></tr><tr><td>用例图（Usecase Diagrams）</td><td>用来描述用户的需求，从用户的角度描述系统的功能，并指出各功能的执行者，强调谁在使用系统、系统为执行者完成哪些功能</td></tr><tr><td>时序图（Sequence Diagrams）</td><td>描述对象之间的交互顺序，着重体现对象间消息传递的时间顺序，强调对象之间消息的发送顺序，同时显示对象之间的交互过程</td></tr><tr><td>协作图（Collaboration Diagrams）</td><td>描述对象之间的合作关系，更侧重向用户对象说明哪些对象有消息的传递</td></tr><tr><td>包图（Package Diagrams）</td><td>对构成系统的模型元素进行分组整理的图</td></tr><tr><td>组合结构图（Composite Structure Diagrams）</td><td>表示类或者构建内部结构的图</td></tr><tr><td>时间图（Timing Diagrams）</td><td>用来显示随时间变化，一个或多个元素的值或状态的更改，也显示时间控制事件之间的交互及管理它们的时间和期限约束</td></tr><tr><td>交互概览图（Interaction Overview Diagrams）</td><td>用活动图来表示多个交互之间的控制关系的图</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
